//===================================================================================
// Delphinium Limited 2014 - Alan Machado (Alan.Machado@delphinium.co.uk)
// 
//===================================================================================
// Copyright © Delphinium Limited , All rights reserved.
//===================================================================================

using DPO.Common;
using DPO.Data;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using DPO.Resources;
using System.Reflection;
using System.Configuration;
using System.IO;
using System.Net;


namespace DPO.Domain
{

    public partial class SystemServices : BaseServices
    {
        public SystemServices() : base(true) { }

        #region Initial database setup


        public void SeedSystemDataDefaults()
        {

            SeedSystemUserTypes();

            SeedSystemCommissionTable();

            SeedSystemProjectOpenStatusTypes();

            SeedSystemProjectTypes();

            SeedSystemConstructionTypes();

            SeedSystemProjectStatusTypes();

            //SeedSystemInventoryFromTypes();

            SeedSystemVerticalMarketTypes();

            SeedSystemRequirementTypes();

            SeedSystemDocumentTypes();

            SeedSubmittalSheetTypes();

            SeedSystemCityAreas();

            SeedSystemTools();

            SeedSystemBrands();

            SeedSystemProductFamilies();

            SeedSystemProductMarketTypes();

            SeedSystemProductModelTypes();

            SeedSystemProductCategories();

            SeedSystemProductNoteTypes();

            SeedSystemProductSpecicifactionLookups();

            SeedSystemBusinessTypes();

            SeedSystemBasisDesignTypes();

            SeedZoneStrategyTypes();

            SeedBrandCompetitorTypes();

            SeedDiscountRequestStatusTypes();

            SeedCommissionRequestStatusTypes();

            SeedCountriesAndDistricts();

            SeedCreateSystemGroups();

            SeedSystemPermissions();

            SeedSystemSystemAccesss();

            SeedDaikinBusiness();

            SeedSystemUsers();

        }

        // ####################################################################################
        // User Types
        // ####################################################################################
        private void SeedSystemUserTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.UserTypes.Count() == 0)
            {
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.Systems, Description = "Systems" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.DaikinSuperUser, Description = "Daikin Super User" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.DaikinAdmin, Description = "Daikin Admin Manager" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.DaikinEmployee, Description = "Daikin Employee" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.CustomerSuperUser, Description = "Customer Super User" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.CustomerAdmin, Description = "Customer Admin" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.CustomerUser, Description = "Customer User" });
                ctx.UserTypes.Add(new UserType { UserTypeId = UserTypeEnum.NotSet, Description = "Not Set" });

                ctx.SaveChanges();
            }
        }
        // ####################################################################################
        // User Types
        // ####################################################################################
        private void SeedSystemCommissionTable()
        {
            #region Commission Data
            //decimal[] commissionData = {0.290M,	8.00M,
            //                            0.291M,	8.00M,
            //                            0.292M,	8.00M,
            //                            0.293M,	8.00M,
            //                            0.294M,	8.00M,
            //                            0.295M,	8.00M,
            //                            0.296M,	8.00M,
            //                            0.297M,	8.00M,
            //                            0.298M,	8.00M,
            //                            0.299M,	8.00M,
            //                            0.300M,	8.00M,
            //                            0.301M,	8.00M,
            //                            0.302M,	8.00M,
            //                            0.303M,	8.00M,
            //                            0.304M,	8.00M,
            //                            0.305M,	8.00M,
            //                            0.306M,	8.00M,
            //                            0.307M,	8.00M,
            //                            0.308M,	8.00M,
            //                            0.309M,	8.00M,
            //                            0.310M,	8.00M,
            //                            0.311M,	8.00M,
            //                            0.312M,	8.00M,
            //                            0.313M,	8.00M,
            //                            0.314M,	8.00M,
            //                            0.315M,	8.00M,
            //                            0.316M,	8.00M,
            //                            0.317M,	8.00M,
            //                            0.318M,	8.00M,
            //                            0.319M,	8.00M,
            //                            0.320M,	8.00M,
            //                            0.321M,	8.00M,
            //                            0.322M,	8.00M,
            //                            0.323M,	8.00M,
            //                            0.324M,	8.00M,
            //                            0.325M,	8.00M,
            //                            0.326M,	8.00M,
            //                            0.327M,	8.00M,
            //                            0.328M,	8.00M,
            //                            0.329M,	8.00M,
            //                            0.330M,	8.00M,
            //                            0.331M,	8.00M,
            //                            0.332M,	8.00M,
            //                            0.333M,	8.00M,
            //                            0.334M,	8.00M,
            //                            0.335M,	8.00M,
            //                            0.336M,	8.00M,
            //                            0.337M,	8.00M,
            //                            0.338M,	8.00M,
            //                            0.339M,	8.00M,
            //                            0.340M,	8.00M,
            //                            0.341M,	8.00M,
            //                            0.342M,	8.00M,
            //                            0.343M,	8.00M,
            //                            0.344M,	8.00M,
            //                            0.345M,	8.00M,
            //                            0.346M,	8.00M,
            //                            0.347M,	8.00M,
            //                            0.348M,	8.00M,
            //                            0.349M,	8.00M,
            //                            0.350M,	8.00M,
            //                            0.351M,	8.00M,
            //                            0.352M,	8.00M,
            //                            0.353M,	8.00M,
            //                            0.354M,	8.00M,
            //                            0.355M,	8.00M,
            //                            0.356M,	8.00M,
            //                            0.357M,	8.00M,
            //                            0.358M,	8.00M,
            //                            0.359M,	8.00M,
            //                            0.360M,	8.00M,
            //                            0.361M,	8.00M,
            //                            0.362M,	8.00M,
            //                            0.363M,	8.00M,
            //                            0.364M,	8.00M,
            //                            0.365M,	8.00M,
            //                            0.366M,	8.00M,
            //                            0.367M,	8.00M,
            //                            0.368M,	8.00M,
            //                            0.369M,	8.00M,
            //                            0.370M,	10.00M,
            //                            0.371M,	10.11M,
            //                            0.372M,	10.22M,
            //                            0.373M,	10.32M,
            //                            0.374M,	10.43M,
            //                            0.375M,	10.53M,
            //                            0.376M,	10.64M,
            //                            0.377M,	10.74M,
            //                            0.378M,	10.85M,
            //                            0.379M,	10.95M,
            //                            0.380M,	11.05M,
            //                            0.381M,	11.15M,
            //                            0.382M,	11.26M,
            //                            0.383M,	11.36M,
            //                            0.384M,	11.46M,
            //                            0.385M,	11.56M,
            //                            0.386M,	11.66M,
            //                            0.387M,	11.76M,
            //                            0.388M,	11.86M,
            //                            0.389M,	11.95M,
            //                            0.390M,	12.05M,
            //                            0.391M,	12.15M,
            //                            0.392M,	12.24M,
            //                            0.393M,	12.34M,
            //                            0.394M,	12.44M,
            //                            0.395M,	12.53M,
            //                            0.396M,	12.63M,
            //                            0.397M,	12.72M,
            //                            0.398M,	12.81M,
            //                            0.399M,	12.91M,
            //                            0.400M,	13.00M,
            //                            0.401M,	13.09M,
            //                            0.402M,	13.18M,
            //                            0.403M,	13.28M,
            //                            0.404M,	13.37M,
            //                            0.405M,	13.46M,
            //                            0.406M,	13.55M,
            //                            0.407M,	13.64M,
            //                            0.408M,	13.73M,
            //                            0.409M,	13.81M,
            //                            0.410M,	13.90M,
            //                            0.411M,	13.99M,
            //                            0.412M,	14.08M,
            //                            0.413M,	14.16M,
            //                            0.414M,	14.25M,
            //                            0.415M,	14.34M,
            //                            0.416M,	14.42M,
            //                            0.417M,	14.51M,
            //                            0.418M,	14.59M,
            //                            0.419M,	14.68M,
            //                            0.420M,	14.76M,
            //                            0.421M,	14.85M,
            //                            0.422M,	14.93M,
            //                            0.423M,	15.01M,
            //                            0.424M,	15.09M,
            //                            0.425M,	15.18M,
            //                            0.426M,	15.26M,
            //                            0.427M,	15.34M,
            //                            0.428M,	15.42M,
            //                            0.429M,	15.50M,
            //                            0.430M,	15.58M,
            //                            0.431M,	15.66M,
            //                            0.432M,	15.74M,
            //                            0.433M,	15.82M,
            //                            0.434M,	15.90M,
            //                            0.435M,	15.98M,
            //                            0.436M,	16.06M,
            //                            0.437M,	16.13M,
            //                            0.438M,	16.21M,
            //                            0.439M,	16.29M,
            //                            0.440M,	16.36M,
            //                            0.441M,	16.44M,
            //                            0.442M,	16.52M,
            //                            0.443M,	16.59M,
            //                            0.444M,	16.67M,
            //                            0.445M,	16.74M,
            //                            0.446M,	16.82M,
            //                            0.447M,	16.89M,
            //                            0.448M,	16.96M,
            //                            0.449M,	17.04M,
            //                            0.450M,	17.11M,
            //                            0.451M,	17.18M,
            //                            0.452M,	17.26M,
            //                            0.453M,	17.33M,
            //                            0.454M,	17.40M,
            //                            0.455M,	17.47M,
            //                            0.456M,	17.54M,
            //                            0.457M,	17.61M,
            //                            0.458M,	17.69M,
            //                            0.459M,	17.76M,
            //                            0.460M,	17.83M,
            //                            0.461M,	17.90M,
            //                            0.462M,	17.97M,
            //                            0.463M,	18.03M,
            //                            0.464M,	18.10M,
            //                            0.465M,	18.17M,
            //                            0.466M,	18.24M,
            //                            0.467M,	18.31M,
            //                            0.468M,	18.38M,
            //                            0.469M,	18.44M,
            //                            0.470M,	18.51M,
            //                            0.471M,	18.58M,
            //                            0.472M,	18.64M,
            //                            0.473M,	18.71M,
            //                            0.474M,	18.78M,
            //                            0.475M,	18.84M,
            //                            0.476M,	18.91M,
            //                            0.477M,	18.97M,
            //                            0.478M,	19.04M,
            //                            0.479M,	19.10M,
            //                            0.480M,	19.17M,
            //                            0.481M,	19.23M,
            //                            0.482M,	19.29M,
            //                            0.483M,	19.36M,
            //                            0.484M,	19.42M,
            //                            0.485M,	19.48M,
            //                            0.486M,	19.55M,
            //                            0.487M,	19.61M,
            //                            0.488M,	19.67M,
            //                            0.489M,	19.73M,
            //                            0.490M,	19.80M,
            //                            0.491M,	19.86M,
            //                            0.492M,	19.92M,
            //                            0.493M,	19.98M,
            //                            0.494M,	20.04M,
            //                            0.495M,	20.10M,
            //                            0.496M,	20.16M,
            //                            0.497M,	20.22M,
            //                            0.498M,	20.28M,
            //                            0.499M,	20.34M,
            //                            0.500M,	20.40M,
            //                            0.501M,	20.46M,
            //                            0.502M,	20.52M,
            //                            0.503M,	20.58M,
            //                            0.504M,	20.63M,
            //                            0.505M,	20.69M,
            //                            0.506M,	20.75M,
            //                            0.507M,	20.81M,
            //                            0.508M,	20.87M,
            //                            0.509M,	20.92M,
            //                            0.510M,	20.98M,
            //                            0.511M,	21.04M,
            //                            0.512M,	21.09M,
            //                            0.513M,	21.15M,
            //                            0.514M,	21.21M,
            //                            0.515M,	21.26M,
            //                            0.516M,	21.32M,
            //                            0.517M,	21.37M,
            //                            0.518M,	21.43M,
            //                            0.519M,	21.48M,
            //                            0.520M,	21.54M,
            //                            0.521M,	21.59M,
            //                            0.522M,	21.65M,
            //                            0.523M,	21.70M,
            //                            0.524M,	21.76M,
            //                            0.525M,	21.81M,
            //                            0.526M,	21.86M,
            //                            0.527M,	21.92M,
            //                            0.528M,	21.97M,
            //                            0.529M,	22.02M,
            //                            0.530M,	22.08M,
            //                            0.531M,	22.13M,
            //                            0.532M,	22.18M,
            //                            0.533M,	22.23M,
            //                            0.534M,	22.28M,
            //                            0.535M,	22.34M,
            //                            0.536M,	22.39M,
            //                            0.537M,	22.44M,
            //                            0.538M,	22.49M,
            //                            0.539M,	22.54M,
            //                            0.540M,	22.59M,
            //                            0.541M,	22.64M,
            //                            0.542M,	22.69M,
            //                            0.543M,	22.74M,
            //                            0.544M,	22.79M,
            //                            0.545M,	22.84M,
            //                            0.546M,	22.89M,
            //                            0.547M,	22.94M,
            //                            0.548M,	22.99M,
            //                            0.549M,	23.04M,
            //                            0.550M,	23.09M,
            //                            0.551M,	23.14M,
            //                            0.552M,	23.19M,
            //                            0.553M,	23.24M,
            //                            0.554M,	23.29M,
            //                            0.555M,	23.33M,
            //                            0.556M,	23.38M,
            //                            0.557M,	23.43M,
            //                            0.558M,	23.48M,
            //                            0.559M,	23.52M,
            //                            0.560M,	23.57M,
            //                            0.561M,	23.62M,
            //                            0.562M,	23.67M,
            //                            0.563M,	23.71M,
            //                            0.564M,	23.76M,
            //                            0.565M,	23.81M,
            //                            0.566M,	23.85M,
            //                            0.567M,	23.90M,
            //                            0.568M,	23.94M,
            //                            0.569M,	23.99M,
            //                            0.570M,	24.04M,
            //                            0.571M,	24.08M,
            //                            0.572M,	24.13M,
            //                            0.573M,	24.17M,
            //                            0.574M,	24.22M,
            //                            0.575M,	24.26M,
            //                            0.576M,	24.31M,
            //                            0.577M,	24.35M,
            //                            0.578M,	24.39M,
            //                            0.579M,	24.44M,
            //                            0.580M,	24.48M,
            //                            0.581M,	24.53M,
            //                            0.582M,	24.57M,
            //                            0.583M,	24.61M,
            //                            0.584M,	24.66M,
            //                            0.585M,	24.70M,
            //                            0.586M,	24.74M,
            //                            0.587M,	24.79M,
            //                            0.588M,	24.83M,
            //                            0.589M,	24.87M,
            //                            0.590M,	24.92M,
            //                            0.591M,	24.96M,
            //                            0.592M,	25.00M,
            //                            0.593M,	25.04M,
            //                            0.594M,	25.08M,
            //                            0.595M,	25.13M,
            //                            0.596M,	25.17M,
            //                            0.597M,	25.21M,
            //                            0.598M,	25.25M,
            //                            0.599M,	25.29M,
            //                            0.600M,	25.33M,
            //                            0.601M,	25.37M,
            //                            0.602M,	25.42M,
            //                            0.603M,	25.46M,
            //                            0.604M,	25.50M,
            //                            0.605M,	25.54M,
            //                            0.606M,	25.58M,
            //                            0.607M,	25.62M,
            //                            0.608M,	25.66M,
            //                            0.609M,	25.70M,
            //                            0.610M,	25.74M,
            //                            0.611M,	25.78M,
            //                            0.612M,	25.82M,
            //                            0.613M,	25.86M,
            //                            0.614M,	25.90M,
            //                            0.615M,	25.93M,
            //                            0.616M,	25.97M,
            //                            0.617M,	26.01M,
            //                            0.618M,	26.05M,
            //                            0.619M,	26.09M,
            //                            0.620M,	26.13M,
            //                            0.621M,	26.17M,
            //                            0.622M,	26.21M,
            //                            0.623M,	26.24M,
            //                            0.624M,	26.28M,
            //                            0.625M,	26.32M,
            //                            0.626M,	26.36M,
            //                            0.627M,	26.40M,
            //                            0.628M,	26.43M,
            //                            0.629M,	26.47M,
            //                            0.630M,	26.51M,
            //                            0.631M,	26.55M,
            //                            0.632M,	26.58M,
            //                            0.633M,	26.62M,
            //                            0.634M,	26.66M,
            //                            0.635M,	26.69M,
            //                            0.636M,	26.73M,
            //                            0.637M,	26.77M,
            //                            0.638M,	26.80M,
            //                            0.639M,	26.84M,
            //                            0.640M,	26.88M,
            //                            0.641M,	26.91M,
            //                            0.642M,	26.95M,
            //                            0.643M,	26.98M,
            //                            0.644M,	27.02M,
            //                            0.645M,	27.05M,
            //                            0.646M,	27.09M,
            //                            0.647M,	27.13M,
            //                            0.648M,	27.16M,
            //                            0.649M,	27.20M,
            //                            0.650M,	27.23M,
            //                            0.651M,	27.27M,
            //                            0.652M,	27.30M,
            //                            0.653M,	27.34M,
            //                            0.654M,	27.37M,
            //                            0.655M,	27.40M,
            //                            0.656M,	27.44M,
            //                            0.657M,	27.47M,
            //                            0.658M,	27.51M,
            //                            0.659M,	27.54M,
            //                            0.660M,	27.58M,
            //                            0.661M,	27.61M,
            //                            0.662M,	27.64M,
            //                            0.663M,	27.68M,
            //                            0.664M,	27.71M,
            //                            0.665M,	27.74M,
            //                            0.666M,	27.78M,
            //                            0.667M,	27.81M,
            //                            0.668M,	27.84M,
            //                            0.669M,	27.88M,
            //                            0.670M,	27.91M,
            //                            0.671M,	27.94M,
            //                            0.672M,	27.98M,
            //                            0.673M,	28.01M,
            //                            0.674M,	28.04M,
            //                            0.675M,	28.07M,
            //                            0.676M,	28.11M,
            //                            0.677M,	28.14M,
            //                            0.678M,	28.17M,
            //                            0.679M,	28.20M,
            //                            0.680M,	28.24M,
            //                            0.681M,	28.27M,
            //                            0.682M,	28.30M,
            //                            0.683M,	28.33M,
            //                            0.684M,	28.36M,
            //                            0.685M,	28.39M,
            //                            0.686M,	28.43M,
            //                            0.687M,	28.46M,
            //                            0.688M,	28.49M,
            //                            0.689M,	28.52M,
            //                            0.690M,	28.55M,
            //                            0.691M,	28.58M,
            //                            0.692M,	28.61M,
            //                            0.693M,	28.64M,
            //                            0.694M,	28.67M,
            //                            0.695M,	28.71M,
            //                            0.696M,	28.74M,
            //                            0.697M,	28.77M,
            //                            0.698M,	28.80M,
            //                            0.699M,	28.83M,
            //                            0.700M,	28.86M,
            //                            0.701M,	28.89M,
            //                            0.702M,	28.92M,
            //                            0.703M,	28.95M,
            //                            0.704M,	28.98M,
            //                            0.705M,	29.01M,
            //                            0.706M,	29.04M,
            //                            0.707M,	29.07M,
            //                            0.708M,	29.10M,
            //                            0.709M,	29.13M,
            //                            0.710M,	29.15M,
            //                            0.711M,	29.18M,
            //                            0.712M,	29.21M,
            //                            0.713M,	29.24M,
            //                            0.714M,	29.27M,
            //                            0.715M,	29.30M,
            //                            0.716M,	29.33M,
            //                            0.717M,	29.36M,
            //                            0.718M,	29.39M,
            //                            0.719M,	29.42M,
            //                            0.720M,	29.44M,
            //                            0.721M,	29.47M,
            //                            0.722M,	29.50M,
            //                            0.723M,	29.53M,
            //                            0.724M,	29.56M,
            //                            0.725M,	29.59M,
            //                            0.726M,	29.61M,
            //                            0.727M,	29.64M,
            //                            0.728M,	29.67M,
            //                            0.729M,	29.70M,
            //                            0.730M,	29.73M,
            //                            0.731M,	29.75M,
            //                            0.732M,	29.78M,
            //                            0.733M,	29.81M,
            //                            0.734M,	29.84M,
            //                            0.735M,	29.86M,
            //                            0.736M,	29.89M,
            //                            0.737M,	29.92M,
            //                            0.738M,	29.95M,
            //                            0.739M,	29.97M,
            //                            0.740M,	30.00M,
            //                            0.741M,	30.03M,
            //                            0.742M,	30.05M,
            //                            0.743M,	30.08M,
            //                            0.744M,	30.11M,
            //                            0.745M,	30.13M,
            //                            0.746M,	30.16M,
            //                            0.747M,	30.19M,
            //                            0.748M,	30.21M,
            //                            0.749M,	30.24M,
            //                            0.750M,	30.27M,
            //                            0.751M,	30.29M,
            //                            0.752M,	30.32M,
            //                            0.753M,	30.35M,
            //                            0.754M,	30.37M,
            //                            0.755M,	30.40M,
            //                            0.756M,	30.42M,
            //                            0.757M,	30.45M,
            //                            0.758M,	30.47M,
            //                            0.759M,	30.50M,
            //                            0.760M,	30.53M,
            //                            0.761M,	30.55M,
            //                            0.762M,	30.58M,
            //                            0.763M,	30.60M,
            //                            0.764M,	30.63M,
            //                            0.765M,	30.65M,
            //                            0.766M,	30.68M,
            //                            0.767M,	30.70M,
            //                            0.768M,	30.73M,
            //                            0.769M,	30.75M,
            //                            0.770M,	30.78M,
            //                            0.771M,	30.80M,
            //                            0.772M,	30.83M,
            //                            0.773M,	30.85M,
            //                            0.774M,	30.88M,
            //                            0.775M,	30.90M,
            //                            0.776M,	30.93M,
            //                            0.777M,	30.95M,
            //                            0.778M,	30.98M,
            //                            0.779M,	31.00M,
            //                            0.780M,	31.03M,
            //                            0.781M,	31.05M,
            //                            0.782M,	31.07M,
            //                            0.783M,	31.10M,
            //                            0.784M,	31.12M,
            //                            0.785M,	31.15M,
            //                            0.786M,	31.17M,
            //                            0.787M,	31.19M,
            //                            0.788M,	31.22M,
            //                            0.789M,	31.24M,
            //                            0.790M,	31.27M,
            //                            0.791M,	31.29M,
            //                            0.792M,	31.31M,
            //                            0.793M,	31.34M,
            //                            0.794M,	31.36M,
            //                            0.795M,	31.38M,
            //                            0.796M,	31.41M,
            //                            0.797M,	31.43M,
            //                            0.798M,	31.45M,
            //                            0.799M,	31.48M,
            //                            0.800M,	31.50M,
            //                            0.801M,	31.52M,
            //                            0.802M,	31.55M,
            //                            0.803M,	31.57M,
            //                            0.804M,	31.59M,
            //                            0.805M,	31.61M,
            //                            0.806M,	31.64M,
            //                            0.807M,	31.66M,
            //                            0.808M,	31.68M,
            //                            0.809M,	31.71M,
            //                            0.810M,	31.73M,
            //                            0.811M,	31.75M,
            //                            0.812M,	31.77M,
            //                            0.813M,	31.80M,
            //                            0.814M,	31.82M,
            //                            0.815M,	31.84M,
            //                            0.816M,	31.86M,
            //                            0.817M,	31.88M,
            //                            0.818M,	31.91M,
            //                            0.819M,	31.93M,
            //                            0.820M,	31.95M,
            //                            0.821M,	31.97M,
            //                            0.822M,	32.00M,
            //                            0.823M,	32.02M,
            //                            0.824M,	32.04M,
            //                            0.825M,	32.06M,
            //                            0.826M,	32.08M,
            //                            0.827M,	32.10M,
            //                            0.828M,	32.13M,
            //                            0.829M,	32.15M,
            //                            0.830M,	32.17M,
            //                            0.831M,	32.19M,
            //                            0.832M,	32.21M,
            //                            0.833M,	32.23M,
            //                            0.834M,	32.25M,
            //                            0.835M,	32.28M,
            //                            0.836M,	32.30M,
            //                            0.837M,	32.32M,
            //                            0.838M,	32.34M,
            //                            0.839M,	32.36M,
            //                            0.840M,	32.38M,
            //                            0.841M,	32.40M,
            //                            0.842M,	32.42M,
            //                            0.843M,	32.44M,
            //                            0.844M,	32.46M,
            //                            0.845M,	32.49M,
            //                            0.846M,	32.51M,
            //                            0.847M,	32.53M,
            //                            0.848M,	32.55M,
            //                            0.849M,	32.57M,
            //                            0.850M,	32.59M,
            //                            0.851M,	32.61M,
            //                            0.852M,	32.63M,
            //                            0.853M,	32.65M,
            //                            0.854M,	32.67M,
            //                            0.855M,	32.69M,
            //                            0.856M,	32.71M,
            //                            0.857M,	32.73M,
            //                            0.858M,	32.75M,
            //                            0.859M,	32.77M,
            //                            0.860M,	32.79M,
            //                            0.861M,	32.81M,
            //                            0.862M,	32.83M,
            //                            0.863M,	32.85M,
            //                            0.864M,	32.87M,
            //                            0.865M,	32.89M,
            //                            0.866M,	32.91M,
            //                            0.867M,	32.93M,
            //                            0.868M,	32.95M,
            //                            0.869M,	32.97M,
            //                            0.870M,	32.99M,
            //                            0.871M,	33.01M,
            //                            0.872M,	33.03M,
            //                            0.873M,	33.05M,
            //                            0.874M,	33.07M,
            //                            0.875M,	33.09M,
            //                            0.876M,	33.11M,
            //                            0.877M,	33.12M,
            //                            0.878M,	33.14M,
            //                            0.879M,	33.16M,
            //                            0.880M,	33.18M,
            //                            0.881M,	33.20M,
            //                            0.882M,	33.22M,
            //                            0.883M,	33.24M,
            //                            0.884M,	33.26M,
            //                            0.885M,	33.28M,
            //                            0.886M,	33.30M,
            //                            0.887M,	33.31M,
            //                            0.888M,	33.33M,
            //                            0.889M,	33.35M,
            //                            0.890M,	33.37M,
            //                            0.891M,	33.39M,
            //                            0.892M,	33.41M,
            //                            0.893M,	33.43M,
            //                            0.894M,	33.45M,
            //                            0.895M,	33.46M,
            //                            0.896M,	33.48M,
            //                            0.897M,	33.50M,
            //                            0.898M,	33.52M,
            //                            0.899M,	33.54M,
            //                            0.900M,	33.56M,
            //                            0.901M,	33.57M,
            //                            0.902M,	33.59M,
            //                            0.903M,	33.61M,
            //                            0.904M,	33.63M,
            //                            0.905M,	33.65M,
            //                            0.906M,	33.66M,
            //                            0.907M,	33.68M,
            //                            0.908M,	33.70M,
            //                            0.909M,	33.72M,
            //                            0.910M,	33.74M,
            //                            0.911M,	33.75M,
            //                            0.912M,	33.77M,
            //                            0.913M,	33.79M,
            //                            0.914M,	33.81M,
            //                            0.915M,	33.83M,
            //                            0.916M,	33.84M,
            //                            0.917M,	33.86M,
            //                            0.918M,	33.88M,
            //                            0.919M,	33.90M,
            //                            0.920M,	33.91M,
            //                            0.921M,	33.93M,
            //                            0.922M,	33.95M,
            //                            0.923M,	33.97M,
            //                            0.924M,	33.98M,
            //                            0.925M,	34.00M,
            //                            0.926M,	34.02M,
            //                            0.927M,	34.03M,
            //                            0.928M,	34.05M,
            //                            0.929M,	34.07M,
            //                            0.930M,	34.09M,
            //                            0.931M,	34.10M,
            //                            0.932M,	34.12M,
            //                            0.933M,	34.14M,
            //                            0.934M,	34.15M,
            //                            0.935M,	34.17M,
            //                            0.936M,	34.19M,
            //                            0.937M,	34.20M,
            //                            0.938M,	34.22M,
            //                            0.939M,	34.24M,
            //                            0.940M,	34.26M,
            //                            0.941M,	34.27M,
            //                            0.942M,	34.29M,
            //                            0.943M,	34.31M,
            //                            0.944M,	34.32M,
            //                            0.945M,	34.34M,
            //                            0.946M,	34.36M,
            //                            0.947M,	34.37M,
            //                            0.948M,	34.39M,
            //                            0.949M,	34.40M,
            //                            0.950M,	34.42M,
            //                            0.951M,	34.44M,
            //                            0.952M,	34.45M,
            //                            0.953M,	34.47M,
            //                            0.954M,	34.49M,
            //                            0.955M,	34.50M,
            //                            0.956M,	34.52M,
            //                            0.957M,	34.54M,
            //                            0.958M,	34.55M,
            //                            0.959M,	34.57M,
            //                            0.960M,	34.58M,
            //                            0.961M,	34.60M,
            //                            0.962M,	34.62M,
            //                            0.963M,	34.63M,
            //                            0.964M,	34.65M,
            //                            0.965M,	34.66M,
            //                            0.966M,	34.68M,
            //                            0.967M,	34.69M,
            //                            0.968M,	34.71M,
            //                            0.969M,	34.73M,
            //                            0.970M,	34.74M,
            //                            0.971M,	34.76M,
            //                            0.972M,	34.77M,
            //                            0.973M,	34.79M,
            //                            0.974M,	34.80M,
            //                            0.975M,	34.82M,
            //                            0.976M,	34.84M,
            //                            0.977M,	34.85M,
            //                            0.978M,	34.87M,
            //                            0.979M,	34.88M,
            //                            0.980M,	34.90M,
            //                            0.981M,	34.91M,
            //                            0.982M,	34.93M,
            //                            0.983M,	34.94M,
            //                            0.984M,	34.96M,
            //                            0.985M,	34.97M,
            //                            0.986M,	34.99M,
            //                            0.987M,	35.01M,
            //                            0.988M,	35.02M,
            //                            0.989M,	35.04M,
            //                            0.990M,	35.05M,
            //                            0.991M,	35.07M,
            //                            0.992M,	35.08M,
            //                            0.993M,	35.10M,
            //                            0.994M,	35.11M,
            //                            0.995M,	35.13M,
            //                            0.996M,	35.14M,
            //                            0.997M,	35.16M,
            //                            0.998M,	35.17M,
            //                            0.999M,	35.19M,
            //                            1.000M,	35.20M};

            decimal[] commissionData = {
0.200M,  8.0M,
0.201M,  8.0M,
0.202M,  8.0M,
0.203M,  8.0M,
0.204M,  8.0M,
0.205M,  8.0M,
0.206M,  8.0M,
0.207M,  8.0M,
0.208M,  8.0M,
0.209M,  8.0M,
0.210M,  8.0M,
0.211M,  8.0M,
0.212M,  8.0M,
0.213M,  8.0M,
0.214M,  8.0M,
0.215M,  8.0M,
0.216M,  8.0M,
0.217M,  8.0M,
0.218M,  8.0M,
0.219M,  8.0M,
0.220M,  8.0M,
0.221M,  8.0M,
0.222M,  8.0M,
0.223M,  8.0M,
0.224M,  8.0M,
0.225M,  8.0M,
0.226M,  8.0M,
0.227M,  8.0M,
0.228M,  8.0M,
0.229M,  8.0M,
0.230M,  8.0M,
0.231M,  8.0M,
0.232M,  8.0M,
0.233M,  8.0M,
0.234M,  8.0M,
0.235M,  8.0M,
0.236M,  8.0M,
0.237M,  8.0M,
0.238M,  8.0M,
0.239M,  8.0M,
0.240M,  8.0M,
0.241M,  8.0M,
0.242M,  8.0M,
0.243M,  8.0M,
0.244M,  8.0M,
0.245M,  8.0M,
0.246M,  8.0M,
0.247M,  8.0M,
0.248M,  8.0M,
0.249M,  8.0M,
0.250M,  8.0M,
0.251M,  8.0M,
0.252M,  8.0M,
0.253M,  8.0M,
0.254M,  8.0M,
0.255M,  8.0M,
0.256M,  8.0M,
0.257M,  8.0M,
0.258M,  8.0M,
0.259M,  8.0M,
0.260M,  8.0M,
0.261M,  8.0M,
0.262M,  8.0M,
0.263M,  8.0M,
0.264M,  8.0M,
0.265M,  8.0M,
0.266M,  8.0M,
0.267M,  8.0M,
0.268M,  8.0M,
0.269M,  8.0M,
0.270M,  8.0M,
0.271M,  8.0M,
0.272M,  8.0M,
0.273M,  8.0M,
0.274M,  8.0M,
0.275M,  8.0M,
0.276M,  8.0M,
0.277M,  8.0M,
0.278M,  8.0M,
0.279M,  8.0M,
0.280M,  8.0M,
0.281M,  8.0M,
0.282M,  8.0M,
0.283M,  8.0M,
0.284M,  8.0M,
0.285M,  8.0M,
0.286M,  8.0M,
0.287M,  8.0M,
0.288M,  8.0M,
0.289M,  8.0M,
0.290M,  8.0M,
0.291M,  8.0M,
0.292M,  8.0M,
0.293M,  8.0M,
0.294M,  8.0M,
0.295M,  8.0M,
0.296M,  8.0M,
0.297M,  8.0M,
0.298M,  8.0M,
0.299M,  8.0M,
0.300M,  8.0M,
0.301M,  8.0M,
0.302M,  8.0M,
0.303M,  8.0M,
0.304M,  8.0M,
0.305M,  8.0M,
0.306M,  8.0M,
0.307M,  8.0M,
0.308M,  8.0M,
0.309M,  8.0M,
0.310M,  8.0M,
0.311M,  8.0M,
0.312M,  8.0M,
0.313M,  8.0M,
0.314M,  8.0M,
0.315M,  8.0M,
0.316M,  8.0M,
0.317M,  8.0M,
0.318M,  8.0M,
0.319M,  8.0M,
0.320M,  8.0M,
0.321M,  8.0M,
0.322M,  8.0M,
0.323M,  8.0M,
0.324M,  8.0M,
0.325M,  8.0M,
0.326M,  8.0M,
0.327M,  8.0M,
0.328M,  8.0M,
0.329M,  8.0M,
0.330M,  8.0M,
0.331M,  8.0M,
0.332M,  8.0M,
0.333M,  8.0M,
0.334M,  8.0M,
0.335M,  8.0M,
0.336M,  8.0M,
0.337M,  8.0M,
0.338M,  8.0M,
0.339M,  8.0M,
0.340M,  8.0M,
0.341M,  8.0M,
0.342M,  8.0M,
0.343M,  8.0M,
0.344M,  8.0M,
0.345M,  8.0M,
0.346M,  8.0M,
0.347M,  8.0M,
0.348M,  8.0M,
0.349M,  8.0M,
0.350M,  8.0M,
0.351M,  8.0M,
0.352M,  8.0M,
0.353M,  8.0M,
0.354M,  8.0M,
0.355M,  8.0M,
0.356M,  8.0M,
0.357M,  8.0M,
0.358M,  8.0M,
0.359M,  8.0M,
0.360M,  8.0M,
0.361M,  8.0M,
0.362M,  8.0M,
0.363M,  8.0M,
0.364M,  8.0M,
0.365M,  8.0M,
0.366M,  8.0M,
0.367M,  8.0M,
0.368M,  8.0M,
0.369M,  8.0M,
0.3700M,  10.00M,
0.3710M,  10.11M,
0.3720M,  10.22M,
0.3730M,  10.32M,
0.3740M,  10.43M,
0.3750M,  10.53M,
0.3760M,  10.64M,
0.3770M,  10.74M,
0.3780M,  10.85M,
0.3790M,  10.95M,
0.3800M,  11.05M,
0.3810M,  11.15M,
0.3820M,  11.26M,
0.3830M,  11.36M,
0.3840M,  11.46M,
0.3850M,  11.56M,
0.3860M,  11.66M,
0.3870M,  11.76M,
0.3880M,  11.86M,
0.3890M,  11.95M,
0.3900M,  12.05M,
0.3910M,  12.15M,
0.3920M,  12.24M,
0.3930M,  12.34M,
0.3940M,  12.44M,
0.3950M,  12.53M,
0.3960M,  12.63M,
0.3970M,  12.72M,
0.3980M,  12.81M,
0.3990M,  12.91M,
0.4000M,  13.00M,
0.4010M,  13.09M,
0.4020M,  13.18M,
0.4030M,  13.28M,
0.4040M,  13.37M,
0.4050M,  13.46M,
0.4060M,  13.55M,
0.4070M,  13.64M,
0.4080M,  13.73M,
0.4090M,  13.81M,
0.4100M,  13.90M,
0.4110M,  13.99M,
0.4120M,  14.08M,
0.4130M,  14.16M,
0.4140M,  14.25M,
0.4150M,  14.34M,
0.4160M,  14.42M,
0.4170M,  14.51M,
0.4180M,  14.59M,
0.4190M,  14.68M,
0.4200M,  14.76M,
0.4210M,  14.85M,
0.4220M,  14.93M,
0.4230M,  15.01M,
0.4240M,  15.09M,
0.4250M,  15.18M,
0.4260M,  15.26M,
0.4270M,  15.34M,
0.4280M,  15.42M,
0.4290M,  15.50M,
0.4300M,  15.58M,
0.4310M,  15.66M,
0.4320M,  15.74M,
0.4330M,  15.82M,
0.4340M,  15.90M,
0.4350M,  15.98M,
0.4360M,  16.06M,
0.4370M,  16.13M,
0.4380M,  16.21M,
0.4390M,  16.29M,
0.4400M,  16.36M,
0.4410M,  16.44M,
0.4420M,  16.52M,
0.4430M,  16.59M,
0.4440M,  16.67M,
0.4450M,  16.74M,
0.4460M,  16.82M,
0.4470M,  16.89M,
0.4480M,  16.96M,
0.4490M,  17.04M,
0.4500M,  17.11M,
0.4510M,  17.18M,
0.4520M,  17.26M,
0.4530M,  17.33M,
0.4540M,  17.40M,
0.4550M,  17.47M,
0.4560M,  17.54M,
0.4570M,  17.61M,
0.4580M,  17.69M,
0.4590M,  17.76M,
0.4600M,  17.83M,
0.4610M,  17.90M,
0.4620M,  17.97M,
0.4630M,  18.03M,
0.4640M,  18.10M,
0.4650M,  18.17M,
0.4660M,  18.24M,
0.4670M,  18.31M,
0.4680M,  18.38M,
0.4690M,  18.44M,
0.4700M,  18.51M,
0.4710M,  18.58M,
0.4720M,  18.64M,
0.4730M,  18.71M,
0.4740M,  18.78M,
0.4750M,  18.84M,
0.4760M,  18.91M,
0.4770M,  18.97M,
0.4780M,  19.04M,
0.4790M,  19.10M,
0.4800M,  19.17M,
0.4810M,  19.23M,
0.4820M,  19.29M,
0.4830M,  19.36M,
0.4840M,  19.42M,
0.4850M,  19.48M,
0.4860M,  19.55M,
0.4870M,  19.61M,
0.4880M,  19.67M,
0.4890M,  19.73M,
0.4900M,  19.80M,
0.4910M,  19.86M,
0.4920M,  19.92M,
0.4930M,  19.98M,
0.4940M,  20.04M,
0.4950M,  20.10M,
0.4960M,  20.16M,
0.4970M,  20.22M,
0.4980M,  20.28M,
0.4990M,  20.34M,
0.5000M,  20.40M,
0.5010M,  20.46M,
0.5020M,  20.52M,
0.5030M,  20.58M,
0.5040M,  20.63M,
0.5050M,  20.69M,
0.5060M,  20.75M,
0.5070M,  20.81M,
0.5080M,  20.87M,
0.5090M,  20.92M,
0.5100M,  20.98M,
0.5110M,  21.04M,
0.5120M,  21.09M,
0.5130M,  21.15M,
0.5140M,  21.21M,
0.5150M,  21.26M,
0.5160M,  21.32M,
0.5170M,  21.37M,
0.5180M,  21.43M,
0.5190M,  21.48M,
0.5200M,  21.54M,
0.5210M,  21.59M,
0.5220M,  21.65M,
0.5230M,  21.70M,
0.5240M,  21.76M,
0.5250M,  21.81M,
0.5260M,  21.86M,
0.5270M,  21.92M,
0.5280M,  21.97M,
0.5290M,  22.02M,
0.5300M,  22.08M,
0.5310M,  22.13M,
0.5320M,  22.18M,
0.5330M,  22.23M,
0.5340M,  22.28M,
0.5350M,  22.34M,
0.5360M,  22.39M,
0.5370M,  22.44M,
0.5380M,  22.49M,
0.5390M,  22.54M,
0.5400M,  22.59M,
0.5410M,  22.64M,
0.5420M,  22.69M,
0.5430M,  22.74M,
0.5440M,  22.79M,
0.5450M,  22.84M,
0.5460M,  22.89M,
0.5470M,  22.94M,
0.5480M,  22.99M,
0.5490M,  23.04M,
0.5500M,  23.09M,
0.5510M,  23.14M,
0.5520M,  23.19M,
0.5530M,  23.24M,
0.5540M,  23.29M,
0.5550M,  23.33M,
0.5560M,  23.38M,
0.5570M,  23.43M,
0.5580M,  23.48M,
0.5590M,  23.52M,
0.5600M,  23.57M,
0.5610M,  23.62M,
0.5620M,  23.67M,
0.5630M,  23.71M,
0.5640M,  23.76M,
0.5650M,  23.81M,
0.5660M,  23.85M,
0.5670M,  23.90M,
0.5680M,  23.94M,
0.5690M,  23.99M,
0.5700M,  24.04M,
0.5710M,  24.08M,
0.5720M,  24.13M,
0.5730M,  24.17M,
0.5740M,  24.22M,
0.5750M,  24.26M,
0.5760M,  24.31M,
0.5770M,  24.35M,
0.5780M,  24.39M,
0.5790M,  24.44M,
0.5800M,  24.48M,
0.5810M,  24.61M,
0.5820M,  24.74M,
0.5830M,  24.87M,
0.5840M,  25.00M,
0.5850M,  25.13M,
0.5860M,  25.26M,
0.5870M,  25.38M,
0.5880M,  25.51M,
0.5890M,  25.64M,
0.5900M,  25.76M,
0.5910M,  25.89M,
0.5920M,  26.01M,
0.5930M,  26.14M,
0.5940M,  26.26M,
0.5950M,  26.39M,
0.5960M,  26.51M,
0.5970M,  26.63M,
0.5980M,  26.76M,
0.5990M,  26.88M,
0.6000M,  27.00M,
0.6010M,  27.12M,
0.6020M,  27.24M,
0.6030M,  27.36M,
0.6040M,  27.48M,
0.6050M,  27.60M,
0.6060M,  27.72M,
0.6070M,  27.84M,
0.6080M,  27.96M,
0.6090M,  28.08M,
0.6100M,  28.20M,
0.6110M,  28.31M,
0.6120M,  28.43M,
0.6130M,  28.55M,
0.6140M,  28.66M,
0.6150M,  28.78M,
0.6160M,  28.90M,
0.6170M,  29.01M,
0.6180M,  29.13M,
0.6190M,  29.24M,
0.6200M,  29.35M,
0.6210M,  29.47M,
0.6220M,  29.58M,
0.6230M,  29.70M,
0.6240M,  29.81M,
0.6250M,  29.92M,
0.6260M,  30.03M,
0.6270M,  30.14M,
0.6280M,  30.25M,
0.6290M,  30.37M,
0.6300M,  30.48M,
0.6310M,  30.59M,
0.6320M,  30.70M,
0.6330M,  30.81M,
0.6340M,  30.91M,
0.6350M,  31.02M,
0.6360M,  31.13M,
0.6370M,  31.24M,
0.6380M,  31.35M,
0.6390M,  31.46M,
0.6400M,  31.56M,
0.6410M,  31.67M,
0.6420M,  31.78M,
0.6430M,  31.88M,
0.6440M,  31.99M,
0.6450M,  32.09M,
0.6460M,  32.20M,
0.6470M,  32.30M,
0.6480M,  32.41M,
0.6490M,  32.51M,
0.6500M,  32.62M,
0.6510M,  32.72M,
0.6520M,  32.82M,
0.6530M,  32.92M,
0.6540M,  33.03M,
0.6550M,  33.13M,
0.6560M,  33.23M,
0.6570M,  33.33M,
0.6580M,  33.43M,
0.6590M,  33.54M,
0.6600M,  33.64M,
0.6610M,  33.74M,
0.6620M,  33.84M,
0.6630M,  33.94M,
0.6640M,  34.04M,
0.6650M,  34.14M,
0.6660M,  34.23M,
0.6670M,  34.33M,
0.6680M,  34.43M,
0.6690M,  34.53M,
0.6700M,  34.63M,
0.6710M,  34.72M,
0.6720M,  34.82M,
0.6730M,  34.92M,
0.6740M,  35.01M,
0.6750M,  35.11M,
0.6760M,  35.21M,
0.6770M,  35.30M,
0.6780M,  35.40M,
0.6790M,  35.49M,
0.6800M,  35.59M,
0.6810M,  35.68M,
0.6820M,  35.78M,
0.6830M,  35.87M,
0.6840M,  35.96M,
0.6850M,  36.06M,
0.6860M,  36.15M,
0.6870M,  36.24M,
0.6880M,  36.34M,
0.6890M,  36.43M,
0.6900M,  36.52M,
0.6910M,  36.61M,
0.6920M,  36.71M,
0.6930M,  36.80M,
0.6940M,  36.89M,
0.6950M,  36.98M,
0.6960M,  37.07M,
0.6970M,  37.16M,
0.6980M,  37.25M,
0.6990M,  37.34M,
0.7000M,  37.43M,
0.7010M,  37.52M,
0.7020M,  37.61M,
0.7030M,  37.70M,
0.7040M,  37.78M,
0.7050M,  37.87M,
0.7060M,  37.96M,
0.7070M,  38.05M,
0.7080M,  38.14M,
0.7090M,  38.22M,
0.7100M,  38.31M,
0.7110M,  38.40M,
0.7120M,  38.48M,
0.7130M,  38.57M,
0.7140M,  38.66M,
0.7150M,  38.74M,
0.7160M,  38.83M,
0.7170M,  38.91M,
0.7180M,  39.00M,
0.7190M,  39.08M,
0.7200M,  39.17M,
0.7210M,  39.25M,
0.7220M,  39.34M,
0.7230M,  39.42M,
0.7240M,  39.50M,
0.7250M,  39.59M,
0.7260M,  39.67M,
0.7270M,  39.75M,
0.7280M,  39.84M,
0.7290M,  39.92M,
0.7300M,  40.00M,
0.7310M,  40.08M,
0.7320M,  40.16M,
0.7330M,  40.25M,
0.7340M,  40.33M,
0.7350M,  40.41M,
0.7360M,  40.49M,
0.7370M,  40.57M,
0.7380M,  40.65M,
0.7390M,  40.73M,
0.7400M,  40.81M,
0.7410M,  40.89M,
0.7420M,  40.97M,
0.7430M,  41.05M,
0.7440M,  41.13M,
0.7450M,  41.21M,
0.7460M,  41.29M,
0.7470M,  41.37M,
0.7480M,  41.44M,
0.7490M,  41.52M,
0.7500M,  41.60M,
0.7510M,  41.68M,
0.7520M,  41.76M,
0.7530M,  41.83M,
0.7540M,  41.91M,
0.7550M,  41.99M,
0.7560M,  42.06M,
0.7570M,  42.14M,
0.7580M,  42.22M,
0.7590M,  42.29M,
0.7600M,  42.37M,
0.7610M,  42.44M,
0.7620M,  42.52M,
0.7630M,  42.60M,
0.7640M,  42.67M,
0.7650M,  42.75M,
0.7660M,  42.82M,
0.7670M,  42.89M,
0.7680M,  42.97M,
0.7690M,  43.04M,
0.7700M,  43.12M,
0.7710M,  43.19M,
0.7720M,  43.26M,
0.7730M,  43.34M,
0.7740M,  43.41M,
0.7750M,  43.48M,
0.7760M,  43.56M,
0.7770M,  43.63M,
0.7780M,  43.70M,
0.7790M,  43.77M,
0.7800M,  43.85M,
0.7810M,  43.92M,
0.7820M,  43.99M,
0.7830M,  44.06M,
0.7840M,  44.13M,
0.7850M,  44.20M,
0.7860M,  44.27M,
0.7870M,  44.35M,
0.7880M,  44.42M,
0.7890M,  44.49M,
0.7900M,  44.56M,
0.7910M,  44.63M,
0.7920M,  44.70M,
0.7930M,  44.77M,
0.7940M,  44.84M,
0.7950M,  44.91M,
0.7960M,  44.97M,
0.7970M,  45.04M,
0.7980M,  45.11M,
0.7990M,  45.18M,
0.8000M,  45.25M,
0.8010M,  45.32M,
0.8020M,  45.39M,
0.8030M,  45.45M,
0.8040M,  45.52M,
0.8050M,  45.59M,
0.8060M,  45.66M,
0.8070M,  45.72M,
0.8080M,  45.79M,
0.8090M,  45.86M,
0.8100M,  45.93M,
0.8110M,  45.99M,
0.8120M,  46.06M,
0.8130M,  46.13M,
0.8140M,  46.19M,
0.8150M,  46.26M,
0.8160M,  46.32M,
0.8170M,  46.39M,
0.8180M,  46.45M,
0.8190M,  46.52M,
0.8200M,  46.59M,
0.8210M,  31.97M,
0.8220M,  32.00M,
0.8230M,  32.02M,
0.8240M,  32.04M,
0.8250M,  32.06M,
0.8260M,  32.08M,
0.8270M,  32.10M,
0.8280M,  32.13M,
0.8290M,  32.15M,
0.8300M,  32.17M,
0.8310M,  32.19M,
0.8320M,  32.21M,
0.8330M,  32.23M,
0.8340M,  32.25M,
0.8350M,  32.28M,
0.8360M,  32.30M,
0.8370M,  32.32M,
0.8380M,  32.34M,
0.8390M,  32.36M,
0.8400M,  32.38M,
0.8410M,  32.40M,
0.8420M,  32.42M,
0.8430M,  32.44M,
0.8440M,  32.46M,
0.8450M,  32.49M,
0.8460M,  32.51M,
0.8470M,  32.53M,
0.8480M,  32.55M,
0.8490M,  32.57M,
0.8500M,  32.59M,
0.8510M,  32.61M,
0.8520M,  32.63M,
0.8530M,  32.65M,
0.8540M,  32.67M,
0.8550M,  32.69M,
0.8560M,  32.71M,
0.8570M,  32.73M,
0.8580M,  32.75M,
0.8590M,  32.77M,
0.8600M,  32.79M,
0.8610M,  32.81M,
0.8620M,  32.83M,
0.8630M,  32.85M,
0.8640M,  32.87M,
0.8650M,  32.89M,
0.8660M,  32.91M,
0.8670M,  32.93M,
0.8680M,  32.95M,
0.8690M,  32.97M,
0.8700M,  32.99M,
0.8710M,  33.01M,
0.8720M,  33.03M,
0.8730M,  33.05M,
0.8740M,  33.07M,
0.8750M,  33.09M,
0.8760M,  33.11M,
0.8770M,  33.12M,
0.8780M,  33.14M,
0.8790M,  33.16M,
0.8800M,  33.18M,
0.8810M,  33.20M,
0.8820M,  33.22M,
0.8830M,  33.24M,
0.8840M,  33.26M,
0.8850M,  33.28M,
0.8860M,  33.30M,
0.8870M,  33.31M,
0.8880M,  33.33M,
0.8890M,  33.35M,
0.8900M,  33.37M,
0.8910M,  33.39M,
0.8920M,  33.41M,
0.8930M,  33.43M,
0.8940M,  33.45M,
0.8950M,  33.46M,
0.8960M,  33.48M,
0.8970M,  33.50M,
0.8980M,  33.52M,
0.8990M,  33.54M,
0.9000M,  33.56M,
0.9010M,  33.57M,
0.9020M,  33.59M,
0.9030M,  33.61M,
0.9040M,  33.63M,
0.9050M,  33.65M,
0.9060M,  33.66M,
0.9070M,  33.68M,
0.9080M,  33.70M,
0.9090M,  33.72M,
0.9100M,  33.74M,
0.9110M,  33.75M,
0.9120M,  33.77M,
0.9130M,  33.79M,
0.9140M,  33.81M,
0.9150M,  33.83M,
0.9160M,  33.84M,
0.9170M,  33.86M,
0.9180M,  33.88M,
0.9190M,  33.90M,
0.9200M,  33.91M,
0.9210M,  33.93M,
0.9220M,  33.95M,
0.9230M,  33.97M,
0.9240M,  33.98M,
0.9250M,  34.00M,
0.9260M,  34.02M,
0.9270M,  34.03M,
0.9280M,  34.05M,
0.9290M,  34.07M,
0.9300M,  34.09M,
0.9310M,  34.10M,
0.9320M,  34.12M,
0.9330M,  34.14M,
0.9340M,  34.15M,
0.9350M,  34.17M,
0.9360M,  34.19M,
0.9370M,  34.20M,
0.9380M,  34.22M,
0.9390M,  34.24M,
0.9400M,  34.26M,
0.9410M,  34.27M,
0.9420M,  34.29M,
0.9430M,  34.31M,
0.9440M,  34.32M,
0.9450M,  34.34M,
0.9460M,  34.36M,
0.9470M,  34.37M,
0.9480M,  34.39M,
0.9490M,  34.40M,
0.9500M,  34.42M,
0.9510M,  34.44M,
0.9520M,  34.45M,
0.9530M,  34.47M,
0.9540M,  34.49M,
0.9550M,  34.50M,
0.9560M,  34.52M,
0.9570M,  34.54M,
0.9580M,  34.55M,
0.9590M,  34.57M,
0.9600M,  34.58M,
0.9610M,  34.60M,
0.9620M,  34.62M,
0.9630M,  34.63M,
0.9640M,  34.65M,
0.9650M,  34.66M,
0.9660M,  34.68M,
0.9670M,  34.69M,
0.9680M,  34.71M,
0.9690M,  34.73M,
0.9700M,  34.74M,
0.9710M,  34.76M,
0.9720M,  34.77M,
0.9730M,  34.79M,
0.9740M,  34.80M,
0.9750M,  34.82M,
0.9760M,  34.84M,
0.9770M,  34.85M,
0.9780M,  34.87M,
0.9790M,  34.88M,
0.9800M,  34.90M,
0.9810M,  34.91M,
0.9820M,  34.93M,
0.9830M,  34.94M,
0.9840M,  34.96M,
0.9850M,  34.97M,
0.9860M,  34.99M,
0.9870M,  35.01M,
0.9880M,  35.02M,
0.9890M,  35.04M,
0.9900M,  35.05M,
0.9910M,  35.07M,
0.9920M,  35.08M,
0.9930M,  35.10M,
0.9940M,  35.11M,
0.9950M,  35.13M,
0.9960M,  35.14M,
0.9970M,  35.16M,
0.9980M,  35.17M,
0.9990M,  35.19M,
1.0000M,  35.20M,
1.0010M,  35.21M,
1.0020M,  35.23M,
1.0030M,  35.24M,
1.0040M,  35.26M,
1.0050M,  35.27M,
1.0060M,  35.29M,
1.0070M,  35.30M,
1.0080M,  35.32M,
1.0090M,  35.33M,
1.0100M,  35.35M,
1.0110M,  35.36M,
1.0120M,  35.38M,
1.0130M,  35.39M,
1.0140M,  35.40M,
1.0150M,  35.42M,
1.0160M,  35.43M,
1.0170M,  35.45M,
1.0180M,  35.46M,
1.0190M,  35.48M,
1.0200M,  35.49M,
1.0210M,  35.50M,
1.0220M,  35.52M,
1.0230M,  35.53M,
1.0240M,  35.55M,
1.0250M,  35.56M,
1.0260M,  35.58M,
1.0270M,  35.59M,
1.0280M,  35.60M,
1.0290M,  35.62M,
1.0300M,  35.63M,
1.0310M,  35.65M,
1.0320M,  35.66M,
1.0330M,  35.67M,
1.0340M,  35.69M,
1.0350M,  35.70M,
1.0360M,  35.71M,
1.0370M,  35.73M,
1.0380M,  35.74M,
1.0390M,  35.76M,
1.0400M,  35.77M,
1.0410M,  35.78M,
1.0420M,  35.80M,
1.0430M,  35.81M,
1.0440M,  35.82M,
1.0450M,  35.84M,
1.0460M,  35.85M,
1.0470M,  35.86M,
1.0480M,  35.88M,
1.0490M,  35.89M,
1.0500M,  35.90M,
1.0510M,  35.92M,
1.0520M,  35.93M,
1.0530M,  35.94M,
1.0540M,  35.96M,
1.0550M,  35.97M,
1.0560M,  35.98M,
1.0570M,  36.00M,
1.0580M,  36.01M,
1.0590M,  36.02M,
1.0600M,  36.04M,
1.0610M,  36.05M,
1.0620M,  36.06M,
1.0630M,  36.08M,
1.0640M,  36.09M,
1.0650M,  36.10M,
1.0660M,  36.12M,
1.0670M,  36.13M,
1.0680M,  36.14M,
1.0690M,  36.16M,
1.0700M,  36.17M,
1.0710M,  36.18M,
1.0720M,  36.19M,
1.0730M,  36.21M,
1.0740M,  36.22M,
1.0750M,  36.23M,
1.0760M,  36.25M,
1.0770M,  36.26M,
1.0780M,  36.27M,
1.0790M,  36.28M,
1.0800M,  36.30M,
1.0810M,  36.31M,
1.0820M,  36.32M,
1.0830M,  36.33M,
1.0840M,  36.35M,
1.0850M,  36.36M,
1.0860M,  36.37M,
1.0870M,  36.38M,
1.0880M,  36.40M,
1.0890M,  36.41M,
1.0900M,  36.42M,
1.0910M,  36.43M,
1.0920M,  36.45M,
1.0930M,  36.46M,
1.0940M,  36.47M,
1.0950M,  36.48M,
1.0960M,  36.50M,
1.0970M,  36.51M,
1.0980M,  36.52M,
1.0990M,  36.53M,
1.1000M,  36.55M,
1.1010M,  36.56M,
1.1020M,  36.57M,
1.1030M,  36.58M,
1.1040M,  36.59M,
1.1050M,  36.61M,
1.1060M,  36.62M,
1.1070M,  36.63M,
1.1080M,  36.64M,
1.1090M,  36.65M,
1.1100M,  36.67M,
1.1110M,  36.68M,
1.1120M,  36.69M,
1.1130M,  36.70M,
1.1140M,  36.71M,
1.1150M,  36.73M,
1.1160M,  36.74M,
1.1170M,  36.75M,
1.1180M,  36.76M,
1.1190M,  36.77M,
1.1200M,  36.79M,
1.1210M,  36.80M,
1.1220M,  36.81M,
1.1230M,  36.82M,
1.1240M,  36.83M,
1.1250M,  36.84M,
1.1260M,  36.86M,
1.1270M,  36.87M,
1.1280M,  36.88M,
1.1290M,  36.89M,
1.1300M,  36.90M,
1.1310M,  36.91M,
1.1320M,  36.93M,
1.1330M,  36.94M,
1.1340M,  36.95M,
1.1350M,  36.96M,
1.1360M,  36.97M,
1.1370M,  36.98M,
1.1380M,  36.99M,
1.1390M,  37.01M,
1.1400M,  37.02M,
1.1410M,  37.03M,
1.1420M,  37.04M,
1.1430M,  37.05M,
1.1440M,  37.06M,
1.1450M,  37.07M,
1.1460M,  37.09M,
1.1470M,  37.10M,
1.1480M,  37.11M,
1.1490M,  37.12M,
1.1500M,  37.13M,
1.1510M,  37.14M,
1.1520M,  37.15M,
1.1530M,  37.16M,
1.1540M,  37.18M,
1.1550M,  37.19M,
1.1560M,  37.20M,
1.1570M,  37.21M,
1.1580M,  37.22M,
1.1590M,  37.23M,
1.1600M,  37.24M,
1.1610M,  37.25M,
1.1620M,  37.26M,
1.1630M,  37.27M,
1.1640M,  37.29M,
1.1650M,  37.30M,
1.1660M,  37.31M,
1.1670M,  37.32M,
1.1680M,  37.33M,
1.1690M,  37.34M,
1.1700M,  37.35M,
1.1710M,  37.36M,
1.1720M,  37.37M,
1.1730M,  37.38M,
1.1740M,  37.39M,
1.1750M,  37.40M,
1.1760M,  37.41M,
1.1770M,  37.43M,
1.1780M,  37.44M,
1.1790M,  37.45M,
1.1800M,  37.46M,
1.1810M,  37.47M,
1.1820M,  37.48M,
1.1830M,  37.49M,
1.1840M,  37.50M,
1.1850M,  37.51M,
1.1860M,  37.52M,
1.1870M,  37.53M,
1.1880M,  37.54M,
1.1890M,  37.55M,
1.1900M,  37.56M,
1.1910M,  37.57M,
1.1920M,  37.58M,
1.1930M,  37.59M,
1.1940M,  37.60M,
1.1950M,  37.62M,
1.1960M,  37.63M,
1.1970M,  37.64M,
1.1980M,  37.65M,
1.1990M,  37.66M,
1.2000M,  37.67M,
1.2010M,  37.68M,
1.2020M,  37.69M,
1.2030M,  37.70M,
1.2040M,  37.71M,
1.2050M,  37.72M,
1.2060M,  37.73M,
1.2070M,  37.74M,
1.2080M,  37.75M,
1.2090M,  37.76M,
1.2100M,  37.77M,
1.2110M,  37.78M,
1.2120M,  37.79M,
1.2130M,  37.80M,
1.2140M,  37.81M,
1.2150M,  37.82M,
1.2160M,  37.83M,
1.2170M,  37.84M,
1.2180M,  37.85M,
1.2190M,  37.86M,
1.2200M,  37.87M,
1.2210M,  37.88M,
1.2220M,  37.89M,
1.2230M,  37.90M,
1.2240M,  37.91M,
1.2250M,  37.92M,
1.2260M,  37.93M,
1.2270M,  37.94M,
1.2280M,  37.95M,
1.2290M,  37.96M,
1.2300M,  37.97M,
1.2310M,  37.98M,
1.2320M,  37.99M,
1.2330M,  38.00M,
1.2340M,  38.01M,
1.2350M,  38.02M,
1.2360M,  38.03M,
1.2370M,  38.04M,
1.2380M,  38.05M,
1.2390M,  38.05M,
1.2400M,  38.06M,
1.2410M,  38.07M,
1.2420M,  38.08M,
1.2430M,  38.09M,
1.2440M,  38.10M,
1.2450M,  38.11M,
1.2460M,  38.12M,
1.2470M,  38.13M,
1.2480M,  38.14M,
1.2490M,  38.15M,
1.2500M,  38.16M,
1.2510M,  38.17M,
1.2520M,  38.18M,
1.2530M,  38.19M,
1.2540M,  38.20M,
1.2550M,  38.21M,
1.2560M,  38.22M,
1.2570M,  38.23M,
1.2580M,  38.24M,
1.2590M,  38.24M,
1.2600M,  38.25M,
1.2610M,  38.26M,
1.2620M,  38.27M,
1.2630M,  38.28M,
1.2640M,  38.29M,
1.2650M,  38.30M,
1.2660M,  38.31M,
1.2670M,  38.32M,
1.2680M,  38.33M,
1.2690M,  38.34M,
1.2700M,  38.35M,
1.2710M,  38.36M,
1.2720M,  38.36M,
1.2730M,  38.37M,
1.2740M,  38.38M,
1.2750M,  38.39M,
1.2760M,  38.40M,
1.2770M,  38.41M,
1.2780M,  38.42M,
1.2790M,  38.43M,
1.2800M,  38.44M,
1.2810M,  38.45M,
1.2820M,  38.46M,
1.2830M,  38.46M,
1.2840M,  38.47M,
1.2850M,  38.48M,
1.2860M,  38.49M,
1.2870M,  38.50M,
1.2880M,  38.51M,
1.2890M,  38.52M,
1.2900M,  38.53M,
1.2910M,  38.54M,
1.2920M,  38.54M,
1.2930M,  38.55M,
1.2940M,  38.56M,
1.2950M,  38.57M,
1.2960M,  38.58M,
1.2970M,  38.59M,
1.2980M,  38.60M,
1.2990M,  38.61M,
1.3000M,  38.62M,
1.3010M,  38.62M,
1.3020M,  38.63M,
1.3030M,  38.64M,
1.3040M,  38.65M,
1.3050M,  38.66M,
1.3060M,  38.67M,
1.3070M,  38.68M,
1.3080M,  38.69M,
1.3090M,  38.69M,
1.3100M,  38.70M,
1.3110M,  38.71M,
1.3120M,  38.72M,
1.3130M,  38.73M,
1.3140M,  38.74M,
1.3150M,  38.75M,
1.3160M,  38.75M,
1.3170M,  38.76M,
1.3180M,  38.77M,
1.3190M,  38.78M,
1.3200M,  38.79M,
1.3210M,  38.80M,
1.3220M,  38.80M,
1.3230M,  38.81M,
1.3240M,  38.82M,
1.3250M,  38.83M,
1.3260M,  38.84M,
1.3270M,  38.85M,
1.3280M,  38.86M,
1.3290M,  38.86M,
1.3300M,  38.87M,
1.3310M,  38.88M,
1.3320M,  38.89M,
1.3330M,  38.90M,
1.3340M,  38.91M,
1.3350M,  38.91M,
1.3360M,  38.92M,
1.3370M,  38.93M,
1.3380M,  38.94M,
1.3390M,  38.95M,
1.3400M,  38.96M,
1.3410M,  38.96M,
1.3420M,  38.97M,
1.3430M,  38.98M,
1.3440M,  38.99M,
1.3450M,  39.00M,
1.3460M,  39.00M,
1.3470M,  39.01M,
1.3480M,  39.02M,
1.3490M,  39.03M,
1.3500M,  39.04M,
1.3510M,  39.05M,
1.3520M,  39.05M,
1.3530M,  39.06M,
1.3540M,  39.07M,
1.3550M,  39.08M,
1.3560M,  39.09M,
1.3570M,  39.09M,
1.3580M,  39.10M,
1.3590M,  39.11M,
1.3600M,  39.12M,
1.3610M,  39.13M,
1.3620M,  39.13M,
1.3630M,  39.14M,
1.3640M,  39.15M,
1.3650M,  39.16M,
1.3660M,  39.17M,
1.3670M,  39.17M,
1.3680M,  39.18M,
1.3690M,  39.19M,
1.3700M,  39.20M,
1.3710M,  39.20M,
1.3720M,  39.21M,
1.3730M,  39.22M,
1.3740M,  39.23M,
1.3750M,  39.24M,
1.3760M,  39.24M,
1.3770M,  39.25M,
1.3780M,  39.26M,
1.3790M,  39.27M,
1.3800M,  39.28M,
1.3810M,  39.28M,
1.3820M,  39.29M,
1.3830M,  39.30M,
1.3840M,  39.31M,
1.3850M,  39.31M,
1.3860M,  39.32M,
1.3870M,  39.33M,
1.3880M,  39.34M,
1.3890M,  39.34M,
1.3900M,  39.35M,
1.3910M,  39.36M,
1.3920M,  39.37M,
1.3930M,  39.38M,
1.3940M,  39.38M,
1.3950M,  39.39M,
1.3960M,  39.40M,
1.3970M,  39.41M,
1.3980M,  39.41M,
1.3990M,  39.42M,
1.4000M,  39.43M,
1.4010M,  39.44M,
1.4020M,  39.44M,
1.4030M,  39.45M,
1.4040M,  39.46M,
1.4050M,  39.47M,
1.4060M,  39.47M,
1.4070M,  39.48M,
1.4080M,  39.49M,
1.4090M,  39.50M,
1.4100M,  39.50M,
1.4110M,  39.51M,
1.4120M,  39.52M,
1.4130M,  39.53M,
1.4140M,  39.53M,
1.4150M,  39.54M,
1.4160M,  39.55M,
1.4170M,  39.56M,
1.4180M,  39.56M,
1.4190M,  39.57M,
1.4200M,  39.58M,
1.4210M,  39.58M,
1.4220M,  39.59M,
1.4230M,  39.60M,
1.4240M,  39.61M,
1.4250M,  39.61M,
1.4260M,  39.62M,
1.4270M,  39.63M,
1.4280M,  39.64M,
1.4290M,  39.64M,
1.4300M,  39.65M,
1.4310M,  39.66M,
1.4320M,  39.66M,
1.4330M,  39.67M,
1.4340M,  39.68M,
1.4350M,  39.69M,
1.4360M,  39.69M,
1.4370M,  39.70M,
1.4380M,  39.71M,
1.4390M,  39.72M,
1.4400M,  39.72M,
1.4410M,  39.73M,
1.4420M,  39.74M,
1.4430M,  39.74M,
1.4440M,  39.75M,
1.4450M,  39.76M,
1.4460M,  39.76M,
1.4470M,  39.77M,
1.4480M,  39.78M,
1.4490M,  39.79M,
1.4500M,  39.79M,
1.4510M,  39.80M,
1.4520M,  39.81M,
1.4530M,  39.81M,
1.4540M,  39.82M,
1.4550M,  39.83M,
1.4560M,  39.84M,
1.4570M,  39.84M,
1.4580M,  39.85M,
1.4590M,  39.86M,
1.4600M,  39.86M,
1.4610M,  39.87M,
1.4620M,  39.88M,
1.4630M,  39.88M,
1.4640M,  39.89M,
1.4650M,  39.90M,
1.4660M,  39.90M,
1.4670M,  39.91M,
1.4680M,  39.92M,
1.4690M,  39.93M,
1.4700M,  39.93M,
1.4710M,  39.94M,
1.4720M,  39.95M,
1.4730M,  39.95M,
1.4740M,  39.96M,
1.4750M,  39.97M,
1.4760M,  39.97M,
1.4770M,  39.98M,
1.4780M,  39.99M,
1.4790M,  39.99M,
1.4800M,  40.00M,
1.4810M,  40.01M,
1.4820M,  40.01M,
1.4830M,  40.02M,
1.4840M,  40.03M,
1.4850M,  40.03M,
1.4860M,  40.04M,
1.4870M,  40.05M,
1.4880M,  40.05M,
1.4890M,  40.06M,
1.4900M,  40.07M,
1.4910M,  40.07M,
1.4920M,  40.08M,
1.4930M,  40.09M,
1.4940M,  40.09M,
1.4950M,  40.10M,
1.4960M,  40.11M,
1.4970M,  40.11M,
1.4980M,  40.12M,
1.4990M,  40.13M,
1.5000M,  40.13M,
};

            #endregion
            var ctx = this.Db.Context;

            if (ctx.CommissionMultipliers.Count() == 0)
            {
                for (var i = 0; i < commissionData.Length; i += 2)
                {
                    ctx.CommissionMultipliers.Add(new CommissionMultiplier { Multiplier = commissionData[i], CommissionPercentage = commissionData[i + 1] });
                }
                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Product Model Types
        // ####################################################################################
        private void SeedSystemProductModelTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ProductModelTypes.Count() == 0)
            {
                ctx.ProductModelTypes.Add(new ProductModelType { ProductModelTypeId = (int)ProductModelTypeEnum.Accessory, Description = "Accessory" });
                ctx.ProductModelTypes.Add(new ProductModelType { ProductModelTypeId = (int)ProductModelTypeEnum.Indoor, Description = "Indoor" });
                ctx.ProductModelTypes.Add(new ProductModelType { ProductModelTypeId = (int)ProductModelTypeEnum.Other, Description = "Other" });
                ctx.ProductModelTypes.Add(new ProductModelType { ProductModelTypeId = (int)ProductModelTypeEnum.Outdoor, Description = "Outdoor" });
                ctx.ProductModelTypes.Add(new ProductModelType { ProductModelTypeId = (int)ProductModelTypeEnum.System, Description = "System" });

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Product Model Types
        // ####################################################################################
        private void SeedSystemProductNoteTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ProductNoteTypes.Count() == 0)
            {
                ctx.ProductNoteTypes.Add(new ProductNoteType { ProductNoteTypeId = (int)ProductNoteTypeEnum.Benefit, Description = "Benefit" });
                ctx.ProductNoteTypes.Add(new ProductNoteType { ProductNoteTypeId = (int)ProductNoteTypeEnum.StandardFeature, Description = "Feature" });
                ctx.ProductNoteTypes.Add(new ProductNoteType { ProductNoteTypeId = (int)ProductNoteTypeEnum.Note, Description = "Note" });
                ctx.ProductNoteTypes.Add(new ProductNoteType { ProductNoteTypeId = (int)ProductNoteTypeEnum.Other, Description = "Other" });
                //ctx.ProductNoteTypes.Add(new ProductNoteType { ProductNoteTypeId = (int)ProductNoteTypeEnum.StandardAndFeature, Description = "Standard Feature" });
                ctx.ProductNoteTypes.Add(new ProductNoteType { ProductNoteTypeId = (int)ProductNoteTypeEnum.CabinetFeature, Description = "Cabinet Feature" });

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Product Market Types
        // ####################################################################################
        private void SeedSystemProductMarketTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ProductMarketTypes.Count() == 0)
            {
                ctx.ProductMarketTypes.Add(new ProductMarketType { ProductMarketTypeId = (int)ProductMarketTypeEnum.Commercial, Description = "Commercial" });
                ctx.ProductMarketTypes.Add(new ProductMarketType { ProductMarketTypeId = (int)ProductMarketTypeEnum.LightCommercial, Description = "LightCommercial" });
                ctx.ProductMarketTypes.Add(new ProductMarketType { ProductMarketTypeId = (int)ProductMarketTypeEnum.Residential, Description = "Residential" });
                ctx.ProductMarketTypes.Add(new ProductMarketType { ProductMarketTypeId = (int)ProductMarketTypeEnum.Other, Description = "Other" });

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Project Status Types
        // ####################################################################################
        private void SeedSystemProjectOpenStatusTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ProjectOpenStatusTypes.Count() == 0)
            {
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 1, Description ="Spec in/Project on Hold" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 2, Description ="Budget Inquiry only" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 3, Description ="At Design for Spec in" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 4, Description ="Design/Build Quotation" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 5, Description ="Project out to Bid" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 6, Description ="Bid Closed, At Submittal" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 7, Description ="Customer has received PO" });
                //ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 8, Description ="PO received from Customer" });


                ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 1, Description = "Pre design" });
                ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 2, Description = "Design" });
                ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 3, Description = "Quote" });
                ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 4, Description = "Awarded" });
                ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 5, Description = "Customer has PO" });
                ctx.ProjectOpenStatusTypes.Add(new ProjectOpenStatusType { ProjectOpenStatusTypeId = 6, Description = "Project on Order" });


                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // Project Types
        // ####################################################################################
        private void SeedSystemProjectTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ProjectTypes.Count() == 0)
            {
                ctx.ProjectTypes.Add(new ProjectType { ProjectTypeId = (byte)ProjectTypeEnum.PlanSpecFlatSpec, Description = "Plan & Spec  Flat Spec" });
                ctx.ProjectTypes.Add(new ProjectType { ProjectTypeId = (byte)ProjectTypeEnum.PlanSpecBaseBid, Description = "Plan & Spec  Base Bid" });
                ctx.ProjectTypes.Add(new ProjectType { ProjectTypeId = (byte)ProjectTypeEnum.PlanSpecBasisOfDesign, Description = "Plan & Spec  Basis of Design" });
                ctx.ProjectTypes.Add(new ProjectType { ProjectTypeId = (byte)ProjectTypeEnum.PlanSpecEqual, Description = "Plan & Spec  Equal" });
                ctx.ProjectTypes.Add(new ProjectType { ProjectTypeId = (byte)ProjectTypeEnum.PlanSpecApprovalOnly, Description = "Plan & Spec  Approval Only" });
                ctx.ProjectTypes.Add(new ProjectType { ProjectTypeId = (byte)ProjectTypeEnum.DesignBuild, Description = "Design/Build" });

                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // Project Types
        // ####################################################################################
        private void SeedSystemConstructionTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ConstructionTypes.Count() == 0)
            {
                ctx.ConstructionTypes.Add(new ConstructionType { ConstructionTypeId = (byte)ConstructionTypeEnum.New, Description = "New" });
                ctx.ConstructionTypes.Add(new ConstructionType { ConstructionTypeId = (byte)ConstructionTypeEnum.Refurbished, Description = "Refurbished" });
                ctx.ConstructionTypes.Add(new ConstructionType { ConstructionTypeId = (byte)ConstructionTypeEnum.Replacement, Description = "Replacement" });
                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // Bid Status Types
        // ####################################################################################
        private void SeedSystemProjectStatusTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ProjectStatusTypes.Count() == 0)
            {
                ctx.ProjectStatusTypes.Add(new ProjectStatusType { ProjectStatusTypeId = ProjectStatusTypeEnum.Open, Description = "Open" });
                ctx.ProjectStatusTypes.Add(new ProjectStatusType { ProjectStatusTypeId = ProjectStatusTypeEnum.ClosedWon, Description = "Closed-Won" });
                ctx.ProjectStatusTypes.Add(new ProjectStatusType { ProjectStatusTypeId = ProjectStatusTypeEnum.ClosedLost, Description = "Closed-Lost" });
                ctx.ProjectStatusTypes.Add(new ProjectStatusType { ProjectStatusTypeId = ProjectStatusTypeEnum.Inactive, Description = "Inactive" });
                ctx.SaveChanges();
            }
        }


        // ####################################################################################
        // Vertical Market Types
        // ####################################################################################
        private void SeedSystemVerticalMarketTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.VerticalMarketTypes.Count() == 0)
            {
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 1, Description ="Other" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 2, Description ="Office" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 3, Description ="School" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 4, Description ="Retail" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 5, Description ="Hotel" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 6, Description ="Government" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 7, Description ="Residential" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 8, Description ="Healthcare" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 9, Description ="Condominium" });
                //ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 10, Description ="Military" });

                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 1, Description = "Assisted Living" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 2, Description = "Bank" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 3, Description = "Church" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 4, Description = "Commercial (Other)" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 5, Description = "Condominium" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 6, Description = "Fire/Police Stations" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 7, Description = "Fitness Center" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 8, Description = "Government" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 9, Description = "Health Care" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 10, Description = "Hotel" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 11, Description = "Military" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 12, Description = "Office" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 13, Description = "Residential" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 14, Description = "Restaurant" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 15, Description = "School" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 16, Description = "Shop/retail" });
                ctx.VerticalMarketTypes.Add(new VerticalMarketType { VerticalMarketTypeId = 17, Description = "Theater" });

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Requirement Types
        // ####################################################################################
        private void SeedSystemRequirementTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.RequirementTypes.Count() == 0)
            {
                ctx.RequirementTypes.Add(new RequirementType { RequirementTypeId = 100000000, Description = "Standard" });
                ctx.RequirementTypes.Add(new RequirementType { RequirementTypeId = 100000001, Description = "Preferred Item" });
                ctx.RequirementTypes.Add(new RequirementType { RequirementTypeId = 100000002, Description = "Optional" });
                ctx.SaveChanges();
            }
        }

        private void SeedSystemDocumentTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.DocumentTypes.Count() == 0)
            {
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.ProductFlyer, Description = "Product Flyer" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.ProductBrochure, Description = "Product Brochure" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.InstallationManual, Description = "Installation Manual" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.OperationManual, Description = "Operation Manual" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.EngineeringManual, Description = "Engineering Manual" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.ServiceManual, Description = "Service Manual" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.ProductImageLowRes, Description = "Product Image - LowRes" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.SubmittalData, Description = "Submittal Data" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.WrittenGuideSpec, Description = "Written Guide Spec" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.DimensionalDrawing, Description = "Dimensional Drawing" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.CADDrawing, Description = "CAD Drawing" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.Other, Description = "Other" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.PartsManual, Description = "Parts Manual" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.ApplicationGuide, Description = "Application Guide" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.LineCard, Description = "Line Card" });
                ctx.DocumentTypes.Add(new DocumentType { DocumentTypeId = (int)DocumentTypeEnum.ProductCatalog, Description = "Product Catalog" });
                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Requirement Types
        // ####################################################################################
        private void SeedSubmittalSheetTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.SubmittalSheetTypes.Count() == 0)
            {
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000000, Description = "Altherma-Indoor" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000001, Description = "Altherma-Outdoor" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000002, Description = "Altherma-Tank" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000003, Description = "MultiSplit-Indoor" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000004, Description = "MultiSplit-Outdoor" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000005, Description = "System-Cooling" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000006, Description = "System-HP" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000007, Description = "VRV-III-AirCooled" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000008, Description = "VRV-III-WaterCooled" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000009, Description = "VRV-Indoor" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000010, Description = "Controllers" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000011, Description = "Accessories" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000012, Description = "RTU" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000013, Description = "Packaged" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000014, Description = "AC & HP" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000015, Description = "Coils & Air Handlers" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000016, Description = "Gas Furnace" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000017, Description = "Commercial AC & HP" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000018, Description = "Commercial AH" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000019, Description = "Packaged AC & HP" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000020, Description = "Packaged DualFuel" });
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 100000021, Description = "Packaged GasElectric" });

                ctx.SaveChanges();
            }
            if (!ctx.SubmittalSheetTypes.Any(s => s.SubmittalSheetTypeId == (int)SubmittalSheetTypeEnum.Other))
            {
                ctx.SubmittalSheetTypes.Add(new SubmittalSheetType { SubmittalSheetTypeId = 1, Description = "Other" });
                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // City Areas
        // ####################################################################################
        public void SeedSystemCityAreas()
        {
            var ctx = this.Db.Context;

            if (Db.CityAreas.Count() == 0)
            {
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 1,  Name ="Hotel" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 2, Name ="Convenience Store" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 3, Name ="Library" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 4, Name ="Retail Store" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 5, Name ="Restaurant" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 6, Name ="Bank" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 7, Name ="School" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 8, Name ="Office" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 9, Name ="Comms Center" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 10, Name ="Project Office" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 11, Name ="Training Center" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 12, Name ="Logistics Center" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 13, Name ="Headquarters" });
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 14, Name ="Residence" });

                ////UK
                //ctx.CityAreas.Add(new CityArea { CityAreaId = 100, Name ="Supermarket" });

                //Areas
                ctx.CityAreas.Add(new CityArea { CityAreaId = 3, Name = "Library (other)" });
                ctx.CityAreas.Add(new CityArea { CityAreaId = 2, Name = "Logistics Center" });
                ctx.CityAreas.Add(new CityArea { CityAreaId = 1, Name = "Library" });

                ctx.SaveChanges();
            }
        }


        // ####################################################################################
        // Tools
        // ####################################################################################
        private void SeedSystemTools()
        {
            var ctx = this.Db.Context;

            if (Db.Tools.Count() == 0)
            {

                Db.ToolCreate("VRV_XPress", 10);
                Db.ToolCreate("VRV_WXpress", 20);
                Db.ToolCreate("VentilationXpress", 30);
                Db.ToolCreate("Daikin_Altherma", 40);
                Db.ToolCreate("8-Zone Multi-Split Selection Tool", 50);
                Db.ToolCreate("Psychrometric Tool", 60);
                Db.ToolCreate("Unit Converter", 70);

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Brands
        // ####################################################################################
        private void SeedSystemBrands()
        {
            var ctx = this.Db.Context;

            if (ctx.Brands.Count() == 0)
            {
                ctx.Brands.Add(new Brand { BrandId = 1, Name = "Other" });
                ctx.Brands.Add(new Brand { BrandId = 100000000, Name = "Amana" });
                ctx.Brands.Add(new Brand { BrandId = 100000001, Name = "Daikin" });
                ctx.Brands.Add(new Brand { BrandId = 100000002, Name = "Goodman" });
                ctx.Brands.Add(new Brand { BrandId = 100000003, Name = "Clean Comfort" });

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Product families
        // ####################################################################################
        private void SeedSystemProductFamilies()
        {
            var ctx = this.Db.Context;

            if (ctx.ProductFamilies.Count() == 0)
            {
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 1, Name = "Other" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000000, Name = "Mini-Split" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000001, Name = "Altherma" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000002, Name = "Multi-Split" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000003, Name = "Sky-Air" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000004, Name = "VRV" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000005, Name = "RTU" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000006, Name = "Packaged" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000007, Name = "PTAC" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000008, Name = "Ventilation" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000009, Name = "IAQ (Clean Comfort)" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000010, Name = "Accessories" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000011, Name = "Unitary" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000012, Name = "Unitary Split" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000013, Name = "Unitary Package" });
                ctx.ProductFamilies.Add(new ProductFamily { ProductFamilyId = 100000014, Name = "Commercial Split" });

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Product families
        // ####################################################################################
        private void SeedSystemProductCategories()
        {
            var ctx = this.Db.Context;

            if (ctx.ProductCategories.Count() == 0)
            {
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 1, Name = "Other" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000001, Name = "Branch Selector" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000002, Name = "Controllers" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000003, Name = "Filters" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000004, Name = "Electric Heater" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000005, Name = "Drain Pump" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000006, Name = "Decoration Panel" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000007, Name = "Electronic Circuit" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000008, Name = "Pipe Joint" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000009, Name = "Installation Box" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000010, Name = "Others" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000151, Name = "2' x 2' 4 Way Cassette" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000152, Name = "3' x 3' 4 Way Cassette" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000153, Name = "Ceiling Suspended" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000154, Name = "Domestic Hot Water Tank" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000155, Name = "Duct Mounted Medium Static" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000156, Name = "Duct Mounted Slim Type (Low Static)" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000157, Name = "Duct Mounted Standard Static (DC)" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000158, Name = "Floor Standing" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000159, Name = "Floor Standing (Concealed)" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000160, Name = "Hydronic Fan Coil Unit" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000161, Name = "Inverter Ducted Unitary" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000162, Name = "Large Heat Only HydroBox" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000163, Name = "Large Split Type Altherma LT" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000164, Name = "Outside air processing unit" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000165, Name = "Round Flow Cassette" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000166, Name = "Small Heat Only HydroBox" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000167, Name = "Small Split Type Altherma LT" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000168, Name = "VAM" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000169, Name = "Vertical Air Handler" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000170, Name = "Wall Mounted" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000301, Name = "VRV-III" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000302, Name = "VRV-WIII" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000303, Name = "VRV-IV" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000304, Name = "Packaged" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000305, Name = "VRV-III-S" });
                ctx.ProductCategories.Add(new ProductCategory { ProductCategoryId = 100000306, Name = "RTU" });
                ctx.SaveChanges();
            }
        }

        private void SeedSystemProductSpecicifactionLookups()
        {
            var ctx = this.Db.Context;

            if (ctx.ProductSpecificationKeyLookups.Count() == 0 && ctx.ProductSpecificationLabels.Count() != 0)
            {
                string[] data = {
                "AccessLevel","100000000","1",
                "AccessLevel","100000001","2",
                "AccessLevel","100000002","3",
                "AccessLevel","100000003","4",
                "AccessLevel","100000004","5",
                "AccessLevel","100000005","6",
                "AccessLevel","100000006","7",
                "AccessLevel","100000007","8",
                "AccessLevel","100000008","9",

                //"CompressorType","100000000","Standard",
                //"CompressorType","100000001","Inverter",
                //"CompressorType","100000002","Stage",

                "CompressorType","100000000","Standard",
                "CompressorType","100000001","Inverter",
                "CompressorType","100000002","Two Stage",
                "CompressorType","100000003","Single Stage",
                "CondensateDrainOutlet","100000000","1/4",
                "CondensateDrainOutlet","100000001","3/8",
                "CondensateDrainOutlet","100000002","1/2",
                "CondensateDrainOutlet","100000003","5/8",
                "CondensateDrainOutlet","100000004","3/4",
                "CondensateDrainOutlet","100000005","7/8",
                "CondensateDrainOutlet","100000006","1",
                "CondensateDrainOutlet","100000007","1-1/8",
                "CondensateDrainOutlet","100000008","1-1/4",
                "CondensateDrainOutlet","100000009","1-3/8",
                "CondensateDrainOutlet","100000010","1-1/2",
                "CondensateDrainOutlet","100000011","1-5/8",
                "CondensateDrainOutlet","100000012","25/32",
                "CondensateDrainOutlet","100000013","11/16",
                "CondensateDrainOutlet","100000014","1-1/32",
                "CondensateDrainOutlet","100000015","53/64",

                "HeatExchangerType","100000000","Air Cooled",
                "HeatExchangerType","100000001","Water Cooled",
                "HeatExchangerType","100000002","Geothermal",
                "HeatExchangerType","100000003","Gas",
                "HeatExchangerType","100000004","Dual Fuel",

                "HLEqualizing","100000000","1/4",
                "HLEqualizing","100000001","3/8",
                "HLEqualizing","100000002","1/2",
                "HLEqualizing","100000003","5/8",
                "HLEqualizing","100000004","3/4",
                "HLEqualizing","100000005","7/8",
                "HLEqualizing","100000006","1",
                "HLEqualizing","100000007","1-1/8",
                "HLEqualizing","100000008","1-1/4",
                "HLEqualizing","100000009","1-3/8",
                "HLEqualizing","100000010","1-1/2",
                "HLEqualizing","100000011","1-5/8",
                "HLEqualizing","100000012","25/32",
                "HLEqualizing","100000013","11/16",
                "HLEqualizing","100000014","1-1/32",
                "HLEqualizing","100000015","53/64",

                "HLPressureLine","100000000","1/4",
                "HLPressureLine","100000001","3/8",
                "HLPressureLine","100000002","1/2",
                "HLPressureLine","100000003","5/8",
                "HLPressureLine","100000004","3/4",
                "HLPressureLine","100000005","7/8",
                "HLPressureLine","100000006","1",
                "HLPressureLine","100000007","1-1/8",
                "HLPressureLine","100000008","1-1/4",
                "HLPressureLine","100000009","1-3/8",
                "HLPressureLine","100000010","1-1/2",
                "HLPressureLine","100000011","1-5/8",
                "HLPressureLine","100000012","25/32",
                "HLPressureLine","100000013","11/16",
                "HLPressureLine","100000014","1-1/32",
                "HLPressureLine","100000015","53/64",

                "PipeSizeGas","100000000","1/4",
                "PipeSizeGas","100000001","3/8",
                "PipeSizeGas","100000002","1/2",
                "PipeSizeGas","100000003","5/8",
                "PipeSizeGas","100000004","3/4",
                "PipeSizeGas","100000005","7/8",
                "PipeSizeGas","100000006","1",
                "PipeSizeGas","100000007","1-1/8",
                "PipeSizeGas","100000008","1-1/4",
                "PipeSizeGas","100000009","1-3/8",
                "PipeSizeGas","100000010","1-1/2",
                "PipeSizeGas","100000011","1-5/8",
                "PipeSizeGas","100000012","25/32",
                "PipeSizeGas","100000013","11/16",
                "PipeSizeGas","100000014","1-1/32",
                "PipeSizeGas","100000015","53/64",

                "PipeSizeLiquid","100000000","1/4",
                "PipeSizeLiquid","100000001","3/8",
                "PipeSizeLiquid","100000002","1/2",
                "PipeSizeLiquid","100000003","5/8",
                "PipeSizeLiquid","100000004","3/4",
                "PipeSizeLiquid","100000005","7/8",
                "PipeSizeLiquid","100000006","1",
                "PipeSizeLiquid","100000007","1-1/8",
                "PipeSizeLiquid","100000008","1-1/4",
                "PipeSizeLiquid","100000009","1-3/8",
                "PipeSizeLiquid","100000010","1-1/2",
                "PipeSizeLiquid","100000011","1-5/8",
                "PipeSizeLiquid","100000012","25/32",
                "PipeSizeLiquid","100000013","11/16",
                "PipeSizeLiquid","100000014","1-1/32",
                "PipeSizeLiquid","100000015","53/64",

                "WaterInletConnection","100000000","1/4",
                "WaterInletConnection","100000001","3/8",
                "WaterInletConnection","100000002","1/2",
                "WaterInletConnection","100000003","5/8",
                "WaterInletConnection","100000004","3/4",
                "WaterInletConnection","100000005","7/8",
                "WaterInletConnection","100000006","1",
                "WaterInletConnection","100000007","1-1/8",
                "WaterInletConnection","100000008","1-1/4",
                "WaterInletConnection","100000009","1-3/8",
                "WaterInletConnection","100000010","1-1/2",
                "WaterInletConnection","100000011","1-5/8",
                "WaterInletConnection","100000012","25/32",
                "WaterInletConnection","100000013","11/16",
                "WaterInletConnection","100000014","1-1/32",
                "WaterInletConnection","100000015","53/64",

                "WaterOutletConnection","100000000","1/4",
                "WaterOutletConnection","100000001","3/8",
                "WaterOutletConnection","100000002","1/2",
                "WaterOutletConnection","100000003","5/8",
                "WaterOutletConnection","100000004","3/4",
                "WaterOutletConnection","100000005","7/8",
                "WaterOutletConnection","100000006","1",
                "WaterOutletConnection","100000007","1-1/8",
                "WaterOutletConnection","100000008","1-1/4",
                "WaterOutletConnection","100000009","1-3/8",
                "WaterOutletConnection","100000010","1-1/2",
                "WaterOutletConnection","100000011","1-5/8",
                "WaterOutletConnection","100000012","25/32",
                "WaterOutletConnection","100000013","11/16",
                "WaterOutletConnection","100000014","1-1/32",
                "WaterOutletConnection","100000015","53/64",

                "PowerFrequency","100000000","50",
                "PowerFrequency","100000001","60",

                "PowerPhase","100000000","1",
                "PowerPhase","100000001","3",

                "PowerVoltage","100000000","12",
                "PowerVoltage","100000001","24",
                "PowerVoltage","100000002","120",
                "PowerVoltage","100000003","208-230",
                "PowerVoltage","100000004","460",
                "PowerVoltage","100000005","575",
                "PowerVoltage","100000006","277",

                "RefrigerantType","100000000","R-22",
                "RefrigerantType","100000001","R-410A",
                "RefrigerantType","100000002","R-32",

                "ReleaseStatus","100000000","New",
                "ReleaseStatus","100000001","Released",
                "ReleaseStatus","100000002","Abolished",
                "ReleaseStatus","100000003","Hidden Module Unit",

                "UnitInstallationType","100000151","Wall Mounted",
                "UnitInstallationType","100000152","Ceiling Suspended",
                "UnitInstallationType","100000153","Ducted",
                "UnitInstallationType","100000154","Floor Standing",
                "UnitInstallationType","100000155","Ceiling Cassette",
                "UnitInstallationType","100000156","Gas Furnace",
                "UnitInstallationType","100000157","Cased Coil",
                "UnitInstallationType","100000158","Coil Only",
                "UnitInstallationType","100000301","Cooling Only",
                "UnitInstallationType","100000302","Heat Pump",
                "UnitInstallationType","100000303","Heat Recovery",
                "UnitInstallationType","100000304","Air Conditioner"};

                var labels = ctx.ProductSpecificationLabels.ToArray().ToDictionary(l => l.Name);

                for (int i = 0; i < data.Length; i += 3)
                {
                    ProductSpecificationLabel label = null;
                    if (labels.TryGetValue(data[i], out label))
                    {
                        var newLookup = new ProductSpecificationKeyLookup
                        {
                            ProductSpecificationLabelId = label.ProductSpecificationLabelId,
                            Key = data[i + 1],
                            Value = data[i + 2]
                        };
                        ctx.ProductSpecificationKeyLookups.Add(newLookup);
                    }
                }
                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // Business Types
        // ####################################################################################
        private void SeedSystemBusinessTypes()
        {
            var ctx = this.Db.Context;

            if (!ctx.BusinessTypes.Any(b => b.BusinessTypeId == BusinessTypeEnum.Daikin))
            {
                // Add all to default business type permissions

                ctx.BusinessTypes.Add(new BusinessType { BusinessTypeId = BusinessTypeEnum.Daikin, Description = "Daikin Employee" });
                ctx.BusinessTypes.Add(new BusinessType { BusinessTypeId = BusinessTypeEnum.Distributor, Description = "Distributor" });
                ctx.BusinessTypes.Add(new BusinessType { BusinessTypeId = BusinessTypeEnum.ManufacturerRep, Description = "Manufacturer Rep" });
                ctx.BusinessTypes.Add(new BusinessType { BusinessTypeId = BusinessTypeEnum.Dealer, Description = "Dealer/Contractors" });
                ctx.BusinessTypes.Add(new BusinessType { BusinessTypeId = BusinessTypeEnum.Other, Description = "Other" });

                //Kai -- Set deault to Other instead of Unknown.
                // ctx.BusinessTypes.Add(new BusinessType { BusinessTypeId = BusinessTypeEnum.Unknown, Description ="Unknown" });

                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // SystemBasisDesignTypes
        // ####################################################################################
        private void SeedSystemBasisDesignTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.SystemBasisDesignTypes.Count() == 0)
            {
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 1, Description = "Unknown" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 2, Description = "VRV-DAIKIN BASIS OF DESIGN" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 3, Description = "VRV/VRF - DAIKIN EQUAL" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 4, Description = "VRV/VRF - OTHER BASIS/DAIKIN NOT LISTED" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 5, Description = "AIR COOLED DX STD SEER COOLING W/HYDRONIC HEAT" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 6, Description = "AIR COOLED DX STD SEER COOLING W/ELEC HEAT" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 7, Description = "AIR COOLED DX HIGH SEER COOLING W/HYDRONIC HEAT" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 8, Description = "AIR COOLED DX HIGH SEER COOLING W/ELEC HEAT" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 9, Description = "AIR COOLED DX STD SEER HEAT PUMP  W/ELEC HEAT" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 10, Description = "AIR COOLED DX HIGH SEER HEAT PUMP W/ELEC HEAT" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 11, Description = "MINI-SPLIT COOLING ONLY - INVERTER HIGH SEER" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 12, Description = "MINI-SPLIT COOLING ONLY - INVERTER 13 SEER" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 13, Description = "MINI-SPLIT HEAT PUMP - INVERTER 13 SEER" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 14, Description = "MINI-SPLIT HEAT PUMP - INVERTER HIGH SEER" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 15, Description = "MULTI PORT HEAT PUMP - INVERTER" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 16, Description = "PTAC UNITS - COOLING w/Elec Heat 6k to 24,000BTU" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 17, Description = "PTAC UNITS - COOLING W/Hydronic HEat6k to 24,000BTU" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 18, Description = "PTAC UNITS - Heat Pump w/Elect Heat 6k to 24,000BTU" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 19, Description = "PACKAGED UNITS COOLING W/GAS HEAT 3 to 7.5 TONS" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 20, Description = "ROOFTOP PACKAGED UNITS - COOLING W/GAS HEAT > 30TONS" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 21, Description = "ROOFTOP PACKAGED UNITS - COOLING W/ELEC HEAT > 30TONS" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 22, Description = "ROOFTOP PACKAGED UNITS - HEAT PUMP W/GAS HEAT > 30TONS" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 23, Description = "WATER SOURCE HEAT PUMP - STD EFF" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 24, Description = "WATER SOURCE HEAT PUMP - HIGH EFF" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 25, Description = "WATER SOURCE HEAT PUMP - GEOTHERMAL" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 26, Description = "WATER COOLED DX COOLING CENTRALIZED AHU" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 27, Description = "WATER COOLED DX COOLING MULTI-FAN COILS" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 28, Description = "WATER COOLED MODULAR DX" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 29, Description = "WATER COOLED MODULAR CHILLED WATER COOLING w/Elect Heat" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 30, Description = "WATER COOLED MODULAR CHILLED WATER COOLING w/Hydronic Heat" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 31, Description = "AIR COOLED CHILLED WATER RECIP COOLING W/Elec Heat" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 32, Description = "AIR COOLED CHILLED WATER RECIP COOLING W/Hydronic Heat" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 33, Description = "WATER COOLED CHILLER w/Elect Heat" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 34, Description = "WATER COOLED CHILLER w/HyDronic Heat" });
                ctx.SystemBasisDesignTypes.Add(new SystemBasisDesignType { SystemBasisDesignTypeId = 35, Description = "WATER COOLED CENTRALIZED HEAT PUMP-TEMPLIFIER w/Aux Elec Heat" });

                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // ZoneStrategyTypes
        // ####################################################################################
        private void SeedZoneStrategyTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.ZoneStrategyTypes.Count() == 0)
            {
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 1, Description = "Unknown" });
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 2, Description = "NO ZONING APPLIED" });
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 3, Description = "ZONE BY SYSTEM" });
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 4, Description = "APPLIED" });
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 5, Description = "FAN COILS PER ZONE" });
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 6, Description = "CENTRALIZED AHU" });
                ctx.ZoneStrategyTypes.Add(new ZoneStrategyType { ZoneStrategyTypeId = 7, Description = "W/VAV" });

                ctx.SaveChanges();
            }

        }

        // ####################################################################################
        // BrandCompetitorTypes
        // ####################################################################################
        private void SeedBrandCompetitorTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.BrandCompetitorTypes.Count() == 0)
            {
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 1, Description = "Unknown" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 2, Description = "AAON" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 3, Description = "Addison" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 4, Description = "Bryant/Payne" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 5, Description = "Carrier" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 6, Description = "Comfort Star" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 7, Description = "Daikin" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 8, Description = "Fedders" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 9, Description = "Fujitsu" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 10, Description = "Goodman" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 11, Description = "Gree" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 12, Description = "ICP Heil/Tempstar/ComfortMaker" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 13, Description = "Lennox" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 14, Description = "LG" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 15, Description = "Mammoth" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 16, Description = "McQuay" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 17, Description = "Midea" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 18, Description = "Mitsubishi" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 19, Description = "Multi-Stack" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 20, Description = "Samsung" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 21, Description = "Sanyo" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 22, Description = "Toshiba" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 23, Description = "Trane" });
                ctx.BrandCompetitorTypes.Add(new BrandCompetitorType { BrandCompetitorTypeId = 24, Description = "York/JCI" });

                ctx.SaveChanges();
            }

        }

        private void SeedDiscountRequestStatusTypes()
        {
            var ctx = this.Db.Context;

            if (ctx.DiscountRequestStatusTypes.Count() == 0)
            {
                // Add all to default business type permissions

                ctx.DiscountRequestStatusTypes.Add(new DiscountRequestStatusType { DiscountRequestStatusTypeId = (byte)DiscountRequestStatusTypeEnum.Approved, Description = "Approved" });
                ctx.DiscountRequestStatusTypes.Add(new DiscountRequestStatusType { DiscountRequestStatusTypeId = (byte)DiscountRequestStatusTypeEnum.Pending, Description = "Pending" });
                ctx.DiscountRequestStatusTypes.Add(new DiscountRequestStatusType { DiscountRequestStatusTypeId = (byte)DiscountRequestStatusTypeEnum.Rejected, Description = "Rejected" });
                ctx.DiscountRequestStatusTypes.Add(new DiscountRequestStatusType { DiscountRequestStatusTypeId = (byte)DiscountRequestStatusTypeEnum.Deleted, Description = "Deleted" });

                ctx.SaveChanges();
            }

        }

        //Initial load Commission Request Status Types
        private void SeedCommissionRequestStatusTypes()
        {
            var ctx = this.Db.Context;
            if(ctx.CommissionRequestStatusTypes.Count() == 0)
            {
                //add all default commission request types
                ctx.CommissionRequestStatusTypes.Add(new CommissionRequestStatusType { CommissionRequestStatusTypeId = (byte)CommissionRequestStatusTypeEnum.Approved, Description = "Approved"});
                ctx.CommissionRequestStatusTypes.Add(new CommissionRequestStatusType { CommissionRequestStatusTypeId = (byte)CommissionRequestStatusTypeEnum.Rejected, Description = "Rejected"});
                ctx.CommissionRequestStatusTypes.Add(new CommissionRequestStatusType { CommissionRequestStatusTypeId = (byte)CommissionRequestStatusTypeEnum.Deleted, Description = "Deleted"});
                ctx.CommissionRequestStatusTypes.Add(new CommissionRequestStatusType { CommissionRequestStatusTypeId = (byte)CommissionRequestStatusTypeEnum.Pending, Description = "Pending"});

            ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Countries And Districts
        // ####################################################################################
        private void SeedCountriesAndDistricts()
        {
            var ctx = this.Db.Context;


            if (!ctx.Countries.Any(c => c.CountryCode == "CA"))
            {
                var ca = this.Db.CountryCreate("CA", "Canada", "CAN", "124", 1);

                this.Db.StateCreate("Alberta", "AB", ca);
                this.Db.StateCreate("British Columbia", "BC", ca);
                this.Db.StateCreate("Manitoba", "MB", ca);
                this.Db.StateCreate("New Brunswic", "NB", ca);
                this.Db.StateCreate("Newfoundland and Labrador", "NL", ca);
                this.Db.StateCreate("Nova Scotia", "NS", ca);
                this.Db.StateCreate("Northwest Territories", "NT", ca);
                this.Db.StateCreate("Nunavut", "NU", ca);
                this.Db.StateCreate("Ontario", "ON", ca);
                this.Db.StateCreate("Prince Edward Island", "PE", ca);
                this.Db.StateCreate("Quebec", "QC", ca);
                this.Db.StateCreate("Saskatchewan", "SK", ca);
                this.Db.StateCreate("Yukon", "YT", ca);

                ctx.SaveChanges();
            }

            if (!ctx.Countries.Any(c => c.CountryCode == "US"))
            {
                var us = this.Db.CountryCreate("US", "United States", "USA", "840", 1);

                this.Db.StateCreate("Alaska", "AK", us);
                this.Db.StateCreate("Alabama", "AL", us);
                this.Db.StateCreate("Arizona", "AZ", us);
                this.Db.StateCreate("Arkansas", "AR", us);
                this.Db.StateCreate("California", "CA", us);
                this.Db.StateCreate("Colorado", "CO", us);
                this.Db.StateCreate("Connecticut", "CT", us);
                this.Db.StateCreate("Delaware", "DE", us);
                this.Db.StateCreate("Florida", "FL", us);
                this.Db.StateCreate("Georgia", "GA", us);
                this.Db.StateCreate("Hawaii", "HI", us);
                this.Db.StateCreate("Idaho", "ID", us);
                this.Db.StateCreate("Illinois", "IL", us);
                this.Db.StateCreate("Indiana", "IN", us);
                this.Db.StateCreate("Iowa", "IA", us);
                this.Db.StateCreate("Kansas", "KS", us);
                this.Db.StateCreate("Kentucky", "KY", us);
                this.Db.StateCreate("Louisiana", "LA", us);
                this.Db.StateCreate("Maine", "ME", us);
                this.Db.StateCreate("Maryland", "MD", us);
                this.Db.StateCreate("Massachusetts", "MA", us);
                this.Db.StateCreate("Michigan", "MI", us);
                this.Db.StateCreate("Minnesota", "MN", us);
                this.Db.StateCreate("Mississippi", "MS", us);
                this.Db.StateCreate("Missouri", "MO", us);
                this.Db.StateCreate("Montana", "MT", us);
                this.Db.StateCreate("Nebraska", "NE", us);
                this.Db.StateCreate("Nevada", "NV", us);
                this.Db.StateCreate("New Hampshire", "NH", us);
                this.Db.StateCreate("New Jersey", "NJ", us);
                this.Db.StateCreate("New Mexico", "NM", us);
                this.Db.StateCreate("New York", "NY", us);
                this.Db.StateCreate("North Carolina", "NC", us);
                this.Db.StateCreate("North Dakota", "ND", us);
                this.Db.StateCreate("Ohio", "OH", us);
                this.Db.StateCreate("Oklahoma", "OK", us);
                this.Db.StateCreate("Oregon", "OR", us);
                this.Db.StateCreate("Palau", "PW", us);
                this.Db.StateCreate("Pennsylvania", "PA", us);
                this.Db.StateCreate("Rhode Island", "RI", us);
                this.Db.StateCreate("South Carolina", "SC", us);
                this.Db.StateCreate("South Dakota", "SD", us);
                this.Db.StateCreate("Tennessee", "TN", us);
                this.Db.StateCreate("Texas", "TX", us);
                this.Db.StateCreate("Utah", "UT", us);
                this.Db.StateCreate("Vermont", "VT", us);
                this.Db.StateCreate("Virgin Islands", "VI", us);
                this.Db.StateCreate("Virginia", "VA", us);
                this.Db.StateCreate("Washington", "WA", us);
                this.Db.StateCreate("West Virginia", "WV", us);
                this.Db.StateCreate("Wisconsin", "WI", us);
                this.Db.StateCreate("Wyoming", "WY", us);

                ctx.SaveChanges();
            }

            if (!ctx.Countries.Any(c => c.CountryCode == "GB"))
            {
                var gb = this.Db.CountryCreate("GB", "United Kingdom", "GBR", "826", 44);
                this.Db.StateCreate("Bedfordshire", "", gb);
                this.Db.StateCreate("Berkshire", "", gb);
                this.Db.StateCreate("Bristol", "", gb);
                this.Db.StateCreate("Buckinghamshire", "", gb);
                this.Db.StateCreate("Cambridgeshire", "", gb);
                this.Db.StateCreate("Cheshire", "", gb);
                this.Db.StateCreate("CityofLondon", "", gb);
                this.Db.StateCreate("Cornwall", "", gb);
                this.Db.StateCreate("Cumbria", "", gb);
                this.Db.StateCreate("Derbyshire", "", gb);
                this.Db.StateCreate("Devon", "", gb);
                this.Db.StateCreate("Dorset", "", gb);
                this.Db.StateCreate("Durham", "", gb);
                this.Db.StateCreate("EastRidingofYorkshire", "", gb);
                this.Db.StateCreate("EastSussex", "", gb);
                this.Db.StateCreate("Essex", "", gb);
                this.Db.StateCreate("Gloucestershire", "", gb);
                this.Db.StateCreate("GreaterLondon", "", gb);
                this.Db.StateCreate("GreaterManchester", "", gb);
                this.Db.StateCreate("Hampshire", "", gb);
                this.Db.StateCreate("Herefordshire", "", gb);
                this.Db.StateCreate("Hertfordshire", "", gb);
                this.Db.StateCreate("IsleofWight", "", gb);
                this.Db.StateCreate("Kent", "", gb);
                this.Db.StateCreate("Lancashire", "", gb);
                this.Db.StateCreate("Leicestershire", "", gb);
                this.Db.StateCreate("Lincolnshire", "", gb);
                this.Db.StateCreate("Merseyside", "", gb);
                this.Db.StateCreate("Norfolk", "", gb);
                this.Db.StateCreate("NorthYorkshire", "", gb);
                this.Db.StateCreate("Northamptonshire", "", gb);
                this.Db.StateCreate("Northumberland", "", gb);
                this.Db.StateCreate("Nottinghamshire", "", gb);
                this.Db.StateCreate("Oxfordshire", "", gb);
                this.Db.StateCreate("Rutland", "", gb);
                this.Db.StateCreate("Shropshire", "", gb);
                this.Db.StateCreate("Somerset", "", gb);
                this.Db.StateCreate("SouthYorkshire", "", gb);
                this.Db.StateCreate("Staffordshire", "", gb);
                this.Db.StateCreate("Suffolk", "", gb);
                this.Db.StateCreate("Surrey", "", gb);
                this.Db.StateCreate("TyneandWear", "", gb);
                this.Db.StateCreate("Warwickshire", "", gb);
                this.Db.StateCreate("WestMidlands", "", gb);
                this.Db.StateCreate("WestSussex", "", gb);
                this.Db.StateCreate("WestYorkshire", "", gb);
                this.Db.StateCreate("Wiltshire", "", gb);
                this.Db.StateCreate("Worcestershire", "", gb);
                this.Db.StateCreate("Aberdeenshire", "", gb);
                this.Db.StateCreate("Angus", "", gb);
                this.Db.StateCreate("Argyllshire", "", gb);
                this.Db.StateCreate("Ayrshire", "", gb);
                this.Db.StateCreate("Banffshire", "", gb);
                this.Db.StateCreate("Berwickshire", "", gb);
                this.Db.StateCreate("Buteshire", "", gb);
                this.Db.StateCreate("Cromartyshire", "", gb);
                this.Db.StateCreate("Caithness", "", gb);
                this.Db.StateCreate("Clackmannanshire", "", gb);
                this.Db.StateCreate("Dumfriesshire", "", gb);
                this.Db.StateCreate("Dunbartonshire", "", gb);
                this.Db.StateCreate("EastLothian", "", gb);
                this.Db.StateCreate("Fife", "", gb);
                this.Db.StateCreate("Inverness-shire", "", gb);
                this.Db.StateCreate("Kincardineshire", "", gb);
                this.Db.StateCreate("Kinross", "", gb);
                this.Db.StateCreate("Kirkcudbrightshire", "", gb);
                this.Db.StateCreate("Lanarkshire", "", gb);
                this.Db.StateCreate("Midlothian", "", gb);
                this.Db.StateCreate("Morayshire", "", gb);
                this.Db.StateCreate("Nairnshire", "", gb);
                this.Db.StateCreate("Orkney", "", gb);
                this.Db.StateCreate("Peeblesshire", "", gb);
                this.Db.StateCreate("Perthshire", "", gb);
                this.Db.StateCreate("Renfrewshire", "", gb);
                this.Db.StateCreate("Ross-shire", "", gb);
                this.Db.StateCreate("Roxburghshire", "", gb);
                this.Db.StateCreate("Selkirkshire", "", gb);
                this.Db.StateCreate("Shetland", "", gb);
                this.Db.StateCreate("Stirlingshire", "", gb);
                this.Db.StateCreate("Sutherland", "", gb);
                this.Db.StateCreate("WestLothian", "", gb);
                this.Db.StateCreate("Wigtownshire", "", gb);
                this.Db.StateCreate("Anglesey", "", gb);
                this.Db.StateCreate("Brecknockshire", "", gb);
                this.Db.StateCreate("Caernarfonshire", "", gb);
                this.Db.StateCreate("Carmarthenshire", "", gb);
                this.Db.StateCreate("Cardiganshire", "", gb);
                this.Db.StateCreate("Denbighshire", "", gb);
                this.Db.StateCreate("Flintshire", "", gb);
                this.Db.StateCreate("Glamorgan", "", gb);
                this.Db.StateCreate("Merioneth", "", gb);
                this.Db.StateCreate("Monmouthshire", "", gb);
                this.Db.StateCreate("Montgomeryshire", "", gb);
                this.Db.StateCreate("Pembrokeshire", "", gb);
                this.Db.StateCreate("Radnorshire", "", gb);
                this.Db.StateCreate("Antrim", "", gb);
                this.Db.StateCreate("Armagh", "", gb);
                this.Db.StateCreate("Down", "", gb);
                this.Db.StateCreate("Fermanagh", "", gb);
                this.Db.StateCreate("Londonderry", "", gb);
                this.Db.StateCreate("Tyrone", "", gb);
                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // Daikin Business
        // ####################################################################################
        private void SeedDaikinBusiness()
        {
            var ctx = this.Db.Context;

            var daikinCRMAccount = Utilities.Config("dpo.setup.company.accountid");

            var daikin = Db.Businesses.Where(b => b.AccountId == daikinCRMAccount).FirstOrDefault();

            if (daikin == null)
            {

                var daikinCompanyName = Utilities.Config("dpo.setup.company.name");

                if (Db.Businesses.Any(o => o.BusinessName == daikinCompanyName)) return;

                var business = Db.BusinessCreate(BusinessTypeEnum.Daikin);

                business.BusinessName = Utilities.Config("dpo.setup.company.name");

                business.AccountId = daikinCRMAccount;
                business.ShowPricing = true;
                business.Enabled = true;

                business.Address.AddressLine1 = "18th Floor";
                business.Address.AddressLine2 = "475 Fifth Avenue";
                business.Address.Location = "New York";
                business.Address.PostalCode = "10017";
                business.Address.StateId = Db.States.Where(c => c.Name == "New York").Select(c => c.StateId).FirstOrDefault();

                business.Contact.Website = "www.daikincity.com";

                // Add all permissions to daikin to business
                Db.CopyPermissions(EntityEnum.BusinessType, (int)BusinessTypeEnum.Daikin, EntityEnum.Business, business.BusinessId);

                ctx.SaveChanges();
            }
        }

        // ####################################################################################
        // System wide groups
        // ####################################################################################
        private void SeedCreateSystemGroups()
        {
            if (Db.Groups.Any(o => o.Name == "Unallocated")) return;

            this.Context.Groups.Add(new Group { Name = "Unallocated", GroupId = 0 });
            this.Context.Groups.Add(new Group { Name = "Systems", GroupId = 1 });
            this.Context.Groups.Add(new Group { Name = Utilities.Config("dpo.setup.company.name"), GroupId = long.Parse(Utilities.Config("dpo.setup.toplevel.groupid")) });

            Db.UpdateGroupInformation();

            this.Db.Context.SaveChanges();

            //new DaikinServices().ImportGroupData(null);

            //Db.UpdateGroupInformation();

            //this.Db.Context.SaveChanges();

        }
        // ####################################################################################
        // Daikin Super user
        // ####################################################################################
        private void SeedSystemUsers()
        {
            var ctx = this.Db.Context;

            var daikinCRMAccount = Utilities.Config("dpo.setup.company.accountid");

            var systemGroup = Db.Groups.Where(g => g.Name == "Systems").FirstOrDefault();

            var daikin = Db.Businesses.Where(b => b.AccountId == daikinCRMAccount).FirstOrDefault();


            if (!Db.IsUser(Utilities.Config("dpo.setup.superuser.username")))
            {
                var topLevelGroupId = long.Parse(Utilities.Config("dpo.setup.toplevel.groupid"));

                var user = Db.UserCreate(daikin.BusinessId, topLevelGroupId, UserTypeEnum.DaikinSuperUser);

                user.FirstName = "Daikin";
                user.LastName = "Super User";
                user.Email = Utilities.Config("dpo.setup.superuser.username");
                user.IsGroupOwner = true;
                user.Enabled = true;
                user.Salt = 234544543;
                user.Password = Crypto.Hash(Utilities.Config("dpo.setup.superuser.password"), 234544543);
                user.UserTypeId = UserTypeEnum.Systems;
                user.Approved = true;
                user.ApprovedOn = DateTime.Now;
                user.UseBusinessAddress = true;

                // Can see all
                Db.ReplacePermissions(EntityEnum.Business, daikin.BusinessId, EntityEnum.User, user.UserId);

                Db.ReplacePermissions(EntityEnum.UserType, (long)UserTypeEnum.DaikinSuperUser, EntityEnum.User, user.UserId);
            }

            if (!Db.IsUser("alan.machado@delphinium.co.uk"))
            {
                var user1 = Db.UserCreate(daikin, systemGroup, UserTypeEnum.Systems);

                user1.FirstName = "Alan";
                user1.LastName = "Machado";
                user1.Email = "alan.machado@delphinium.co.uk";
                user1.Enabled = true;
                user1.Salt = 234544543;
                user1.Password = Crypto.Hash("c00ki3it1", 234544543);
                user1.UserTypeId = UserTypeEnum.Systems;
                user1.Approved = true;
                user1.ApprovedOn = DateTime.Now;
                user1.UseBusinessAddress = true;

                // Can see all
                Db.ReplacePermissions(EntityEnum.Business, daikin.BusinessId, EntityEnum.User, user1.UserId);
                Db.ReplacePermissions(EntityEnum.UserType, (long)UserTypeEnum.Systems, EntityEnum.User, user1.UserId);

                ctx.SaveChanges();

                Db.SystemRoutinesUpdateMembersCountForGroups();

            }

            if (!Db.IsUser("Sam.Jacobs@wearesmartcookie.com"))
            {
                var user2 = Db.UserCreate(daikin, systemGroup, UserTypeEnum.Systems);

                user2.FirstName = "Sam";
                user2.LastName = "Jacobs";
                user2.Email = "Sam.Jacobs@wearesmartcookie.com";
                user2.Enabled = true;
                user2.Salt = 234544543;
                user2.Password = Crypto.Hash("c00ki3it2", 234544543);
                user2.UserTypeId = UserTypeEnum.Systems;
                user2.Approved = true;
                user2.ApprovedOn = DateTime.Now;
                user2.UseBusinessAddress = true;

                // Can see all
                Db.ReplacePermissions(EntityEnum.Business, daikin.BusinessId, EntityEnum.User, user2.UserId);
                Db.ReplacePermissions(EntityEnum.UserType, (long)UserTypeEnum.Systems, EntityEnum.User, user2.UserId);

                ctx.SaveChanges();

                Db.SystemRoutinesUpdateMembersCountForGroups();

            }

        }


        // ####################################################################################
        // System Access Types and defaults
        // ####################################################################################
        private void SeedSystemPermissions()
        {
            var ctx = this.Db.Context;

            if (Db.Permissions.Count() == 0)
            {

                var brands = ctx.Brands.ToList();
                var tools = ctx.Tools.ToList();
                var families = ctx.ProductFamilies.ToList();
                var cities = ctx.CityAreas.ToList();

                var businessTypes = ctx.BusinessTypes.ToList();


                // ####################################################################
                // Daikin 
                // ####################################################################
                var bType = businessTypes.Where(bt => bt.BusinessTypeId == BusinessTypeEnum.Daikin).FirstOrDefault();
                brands.ForEach(ca => Db.AddPermission(bType, ca));
                tools.ForEach(ca => Db.AddPermission(bType, ca));
                families.ForEach(ca => Db.AddPermission(bType, ca));
                cities.ForEach(ca => Db.AddPermission(bType, ca));
                ctx.SaveChanges();

                // ####################################################################
                // Man Rep 
                // ####################################################################
                bType = businessTypes.Where(bt => bt.BusinessTypeId == BusinessTypeEnum.ManufacturerRep).FirstOrDefault();

                cities.ForEach(ca => Db.AddPermission(bType, ca));
                Db.AddPermission(bType, cities.Where(c => c.Name == "Library (other)").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Logistics Center").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Library").FirstOrDefault());

                tools.ForEach(ca => Db.AddPermission(bType, ca));

                Db.AddPermission(bType, brands.Where(c => c.Name == "Daikin").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Other").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Altherma").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Mini-Split").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Multi-Split").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Sky-Air").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "VRV").FirstOrDefault());

                ctx.SaveChanges();

                // ####################################################################
                // Distrib
                // ####################################################################
                bType = businessTypes.Where(bt => bt.BusinessTypeId == BusinessTypeEnum.Distributor).FirstOrDefault();

                Db.AddPermission(bType, cities.Where(c => c.Name == "Library (other)").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Logistics Center").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Library").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Other").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "Daikin_Altherma").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "8-Zone Multi-Split Selection Tool").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "Psychrometric Tool").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "Unit Converter").FirstOrDefault());

                Db.AddPermission(bType, brands.Where(c => c.Name == "Daikin").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Altherma").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Mini-Split").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Multi-Split").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Sky-Air").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "VRV").FirstOrDefault());
                ctx.SaveChanges();

                // ####################################################################
                // Dealer 
                // ####################################################################
                bType = businessTypes.Where(bt => bt.BusinessTypeId == BusinessTypeEnum.Dealer).FirstOrDefault();

                Db.AddPermission(bType, cities.Where(c => c.Name == "Library (other)").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Logistics Center").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Library").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Other").FirstOrDefault());

                Db.AddPermission(bType, tools.Where(c => c.Name == "Psychrometric Tool").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "Unit Converter").FirstOrDefault());

                Db.AddPermission(bType, brands.Where(c => c.Name == "Daikin").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Altherma").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Mini-Split").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Multi-Split").FirstOrDefault());
                Db.AddPermission(bType, families.Where(c => c.Name == "Sky-Air").FirstOrDefault());

                ctx.SaveChanges();

                // ####################################################################
                // Other
                // ####################################################################
                bType = businessTypes.Where(bt => bt.BusinessTypeId == BusinessTypeEnum.Other).FirstOrDefault();

                Db.AddPermission(bType, cities.Where(c => c.Name == "Library (other)").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Logistics Center").FirstOrDefault());
                Db.AddPermission(bType, cities.Where(c => c.Name == "Library").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Other").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "Psychrometric Tool").FirstOrDefault());
                Db.AddPermission(bType, tools.Where(c => c.Name == "Unit Converter").FirstOrDefault());

                Db.AddPermission(bType, brands.Where(c => c.Name == "Daikin").FirstOrDefault());

                Db.AddPermission(bType, families.Where(c => c.Name == "Mini-Split").FirstOrDefault());

                ctx.SaveChanges();
            }


        }


        // ####################################################################################
        // System Access Types and defaults
        // ####################################################################################
        private void SeedSystemSystemAccesss()
        {
            var ctx = this.Db.Context;

            if (ctx.SystemAccesses.Count() == 0)
            {
                List<object> SystemAccesss = new List<object> 
                { 

                SystemAccessEnum.ManageGroups,"Manage Groups",1,1,0,1,1,0,1,

                SystemAccessEnum.ViewUsers,"View Users",1,1,0,1,1,0,1,
                SystemAccessEnum.EditUser,"Edit Users",1,1,0,1,0,0,1,
                SystemAccessEnum.ApproveUsers,"Approve Users",1,1,0,1,0,0,1,

                //Allow group to be added to top level, allows admin to change user to same level as themsleves
                SystemAccessEnum.AdminAccessRights,"Admin Access Rights",1,0,0,1,0,0,1,
                SystemAccessEnum.UndeleteUser,"Undelete Users",1,0,0,1,0,0,1,

                SystemAccessEnum.ViewBusiness,"View Business",1,1,0,1,1,0,1,
                SystemAccessEnum.EditBusiness,"Edit Business",1,0,0,1,0,0,1,
                SystemAccessEnum.UndeleteBusiness,"Undelete Business",1,0,0,1,0,0,1,

                SystemAccessEnum.ViewProject,"View Project",1,1,1,1,1,1,1,              
                SystemAccessEnum.ViewProjectsInGroup,"View Projects In Group",1,1,0,1,0,0,1,
                SystemAccessEnum.EditProject,"Edit Project",1,1,1,1,1,1,1,
                SystemAccessEnum.UndeleteProject,"Undelete Project",1,1,0,1,1,0,1,

              //  SystemAccessEnum.ShareProject,"Share Project",1,1,1,1,1,1,1,
                SystemAccessEnum.TransferProject,"Transfer Project",1,0,0,1,1,0,1,

                SystemAccessEnum.RequestDiscounts,"Request Discount Approval",0,0,0,1,1,0,1,
                SystemAccessEnum.ApproveDiscounts,"Approve Discount",1,0,0,0,0,0,1,

                SystemAccessEnum.RequestCommission,"Request Commission Approval",0,0,0,1,1,0,1,
                SystemAccessEnum.ApprovedRequestCommission,"Approve Commission",1,0,0,0,0,0,1,

                };

                var usertypes = ctx.UserTypes.ToList();

                for (int i = 0; i < SystemAccesss.Count; i = i + 9)
                {
                    var systemAccess = Db.SystemAccessCreate((SystemAccessEnum)SystemAccesss[i], (string)SystemAccesss[i + 1]);

                    foreach (var usertype in usertypes)
                    {
                        if ((usertype.UserTypeId == UserTypeEnum.DaikinSuperUser && (int)SystemAccesss[i + 2] == 1) ||
                            (usertype.UserTypeId == UserTypeEnum.DaikinAdmin && (int)SystemAccesss[i + 3] == 1) ||
                            (usertype.UserTypeId == UserTypeEnum.DaikinEmployee && (int)SystemAccesss[i + 4] == 1) ||
                            (usertype.UserTypeId == UserTypeEnum.CustomerSuperUser && (int)SystemAccesss[i + 5] == 1) ||
                            (usertype.UserTypeId == UserTypeEnum.CustomerAdmin && (int)SystemAccesss[i + 6] == 1) ||
                            (usertype.UserTypeId == UserTypeEnum.CustomerUser && (int)SystemAccesss[i + 7] == 1) ||
                            (usertype.UserTypeId == UserTypeEnum.Systems && (int)SystemAccesss[i + 8] == 1))
                        {
                            Db.AddPermission(null, usertype, systemAccess);
                        }
                    }

                }

                ctx.SaveChanges();
            }
        }


        #endregion

    }

}