@model ProductModel
@{
    var specs = Model.Specifications;
}

    <tr>
        <td>Power Supply (V/Hz/Ph):</td>
        <td>@specs.GetString("PowerVoltage") / @specs.GetString("PowerFrequency") / @specs.GetString("PowerPhase")</td>

        @{
            var airFlowLabels = new List<string>
            {
                "HH","High","Med","Low","SL"
            };

            var airFlowHigh = "";

            if (specs.GetString("AirFlowRateHighText") != null)
            {
                airFlowHigh = specs.GetString("AirFlowRateHighText");
            }
            else if (specs.GetString("AirFlowRateHighCooling") != null)
            {
                airFlowHigh = specs.GetString("AirFlowRateHighCooling");
            }
            else if (specs.GetDecimal("AirFlowRateHighHeating", "N0") != null)
            {
                airFlowHigh = specs.GetDecimal("AirFlowRateHighHeating", "N0");
            }

            var airFlowRates = new List<string>{
                specs.GetDecimal("AirFlowRateSuperHighCooling", "N0") != null? specs.GetDecimal("AirFlowRateSuperHighCooling", "N0"): specs.GetDecimal("AirFlowRateSuperHighHeating", "N0"),
                airFlowHigh,
                specs.GetDecimal("AirFlowRateMediumCooling", "N0") != null? specs.GetDecimal("AirFlowRateMediumCooling", "N0"): specs.GetDecimal("AirFlowRateMediumHeating", "N0"),
                specs.GetDecimal("AirFlowRateLowCooling", "N0") != null? specs.GetDecimal("AirFlowRateLowCooling", "N0"): specs.GetDecimal("AirFlowRateLowHeating", "N0"),
                specs.GetDecimal("AirFlowRateSuperLowCooling", "N0") != null? specs.GetDecimal("AirFlowRateSuperLowCooling", "N0"): specs.GetDecimal("AirFlowRateSuperLowHeating", "N0")
            };

            var airFlowLabelsCombined = new List<string>();
            var airFlowRatesCombined = new List<string>();

            for (var i = 0; i < airFlowRates.Count; i++)
            {
                if (airFlowRates[i] != null)
                {
                    airFlowRatesCombined.Add(airFlowRates[i]);
                    airFlowLabelsCombined.Add(airFlowLabels[i]);
                }
            }
        }


        @if (airFlowHigh != null)
            {
            <td>Airflow Rate (@string.Join(" / ", airFlowLabelsCombined)) (CFM):</td>
                <td>@string.Join(" / ", airFlowRatesCombined)</td>
        }
        else
        {
            <td>Airflow Rate (CFM):</td>
                <td></td>
        }
    </tr>
    <tr>
        <td>Min. Circuit Amps MCA (A):</td>
        <td>
            @specs.GetString("MinCircuitAmps")
        </td>
        <td>Suction Valve Connection Size (inch):</td>
        <td>@specs.GetString("PipeSizeGas")</td>

    </tr>
    <tr>
        <td>Max Overcurrent Protection (MOP) (A):</td>
        <td>
            @specs.GetString("MaxOvercurrentProtection")
        </td>

        <td>Liquid Valve Connection Size (inch):</td>
        <td>@specs.GetString("PipeSizeLiquid")</td>
    </tr>
  
    <tr>
        <td>Dimensions (HxWxD) (in):</td>
        <td>@specs.GetString("DimensionsUnitHeight") x @specs.GetString("DimensionsUnitWidth") x @specs.GetString("DimensionsUnitDepth")</td>
        <td>Condensate Connection (inch):</td>
        <td>@specs.GetString("CondensateDrainOutlet")</td>

    </tr>
    <tr>
        <td>Net Weight (lb):</td>
        <td>
            @specs.GetString("WeightUnit")
        </td>
        <td>Blower Size Diameter (inch):</td>
        <td>@specs.GetString("DimensionsBlowerDiameter")</td>

    </tr>
    <tr>
        <td>Gross Weight (lb):</td>
        <td>@specs.GetDecimal("WeightShippingUnit", "N0")</td>

        <td>Blower Size Width (inch):</td>
        <td>@specs.GetString("DimensionsBlowerWidth")</td>
    </tr>

 