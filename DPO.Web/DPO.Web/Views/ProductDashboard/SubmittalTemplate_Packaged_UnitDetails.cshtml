@model ProductModel
@{
    var specs = Model.Specifications;
}

    <tr>
        <td>Power Supply (V/Hz/Ph):</td>
        <td>@specs.GetString("PowerVoltage") / @specs.GetString("PowerFrequency") / @specs.GetString("PowerPhase")</td>

        <td>Compressor Stage:</td>
        <td>@specs.GetString("CompressorStages")</td>
    </tr>
    <tr>
        <td>Min. Circuit Amps MCA (A):</td>
        <td>
            @specs.GetString("MinCircuitAmp")
        </td>

        @{
            var airFlowLabels = new List<string>
            {
            "HH","High","Med","Low","SL"
            };

            var airFlowHigh = "";

            if (specs.GetString("AirFlowRateHighText") != null)
            {
                airFlowHigh = specs.GetString("AirFlowRateHighText");
            }
            else if (specs.GetString("AirFlowRateHighCooling") != null)
            {
                airFlowHigh = specs.GetString("AirFlowRateHighCooling");
            }
            else if (specs.GetDecimal("AirFlowRateHighHeating", "N0") != null)
            {
                airFlowHigh = specs.GetDecimal("AirFlowRateHighHeating", "N0");
            }

            var airFlowRates = new List<string>{
            specs.GetDecimal("AirFlowRateSuperHighCooling", "N0") != null? specs.GetDecimal("AirFlowRateSuperHighCooling", "N0"): specs.GetDecimal("AirFlowRateSuperHighHeating", "N0"),
            airFlowHigh,
            specs.GetDecimal("AirFlowRateMediumCooling", "N0") != null? specs.GetDecimal("AirFlowRateMediumCooling", "N0"): specs.GetDecimal("AirFlowRateMediumHeating", "N0"),
            specs.GetDecimal("AirFlowRateLowCooling", "N0") != null? specs.GetDecimal("AirFlowRateLowCooling", "N0"): specs.GetDecimal("AirFlowRateLowHeating", "N0"),
            specs.GetDecimal("AirFlowRateSuperLowCooling", "N0") != null? specs.GetDecimal("AirFlowRateSuperLowCooling", "N0"): specs.GetDecimal("AirFlowRateSuperLowHeating", "N0")
        };
            var airFlowLabelsCombined = new List<string>();
            var airFlowRatesCombined = new List<string>();

            for (var i = 0; i < airFlowRates.Count; i++)
            {
                if (airFlowRates[i] != null)
                {
                    airFlowRatesCombined.Add(airFlowRates[i]);
                    airFlowLabelsCombined.Add(airFlowLabels[i]);
                }
            }
        }
        @if (airFlowHigh != null)
            {
            <td>Airflow Rate (@string.Join(" / ", airFlowLabelsCombined)) (CFM):</td>
                <td>@string.Join(" / ", airFlowRatesCombined)</td>
        }
        else
        {
            <td>Airflow Rate (CFM):</td>
                <td></td>
        }
    </tr>
    <tr>
        <td>Max Overcurrent Protection (MOP) (A):</td>
        <td>
            @specs.GetString("MaxOvercurrentProtection")
    </td>

        @{
                var soundPressureLabels = new List<string>
            {
                "High","Med","Low","SL"
            };
            var soundPressureRates = new List<string>{
            specs.GetDecimal("SoundPressureHighCooling", "N0") != null? specs.GetDecimal("SoundPressureHighCooling", "N0"): specs.GetDecimal("SoundPressureHighHeating", "N0"),
            specs.GetDecimal("SoundPressureMediumCooling", "N0") != null? specs.GetDecimal("SoundPressureMediumCooling", "N0"): specs.GetDecimal("SoundPressureMediumHeating", "N0"),
            specs.GetDecimal("SoundPressureLowCooling", "N0") != null? specs.GetDecimal("SoundPressureLowCooling", "N0"): specs.GetDecimal("SoundPressureLowHeating", "N0"),
            specs.GetDecimal("SoundPressureSuperLowCooling", "N0") != null? specs.GetDecimal("SoundPressureSuperLowCooling", "N0"): specs.GetDecimal("SoundPressureSuperLowHeating", "N0")
        };
            var soundPressureLabelsCombined = new List<string>();
            var soundPressureRatesCombined = new List<string>();

            for (var i = 0; i < soundPressureRates.Count; i++)
            {
                if (soundPressureRates[i] != null)
                {
                    soundPressureRatesCombined.Add(soundPressureRates[i]);
                    soundPressureLabelsCombined.Add(soundPressureLabels[i]);
                }
            }
        }
        @if (soundPressureRates != null)
            {
            <td>Sound Pressure (@string.Join(" / ", soundPressureLabelsCombined)) (dBA):</td>
                <td>@string.Join(" / ", soundPressureRatesCombined)</td>
        }
        else
        {
            <td>Sound Pressure (dBA):</td>
                <td></td>
        }
    </tr>
    <tr>
        <td>Max Starting Current MSC(A):</td>
        <td>
            @((specs.GetString("MaxStartingCurrentText") != null) ? specs.GetString("MaxStartingCurrentText") : specs.GetDecimal("MaxStartingCurrent", "N2"))
        </td>

        <td>Rated External Static Pressure - inWG:</td>
        <td>@specs.GetString("ExternalStaticPressureRated")</td>
    </tr>
    <tr>
        <td>Rated Load Amps RLA(A):</td>
        <td>
            @specs.GetString("RatedLoadAmps")
    </td>
        <td>Cooling Operation Range (&deg;F DB):</td>
        <td>@specs.GetDecimal("CoolingOperationRangeStdMin", "N0") - @specs.GetDecimal("CoolingOperationRangeStdMax", "N0")</td>
    </tr>

    <tr>
        <td>Refrigerant Type:</td>
        <td>@specs.GetString("RefrigerantType")</td>

        <td>Heating Operation Range (&deg;F WB):</td>
        <td>@specs.GetDecimal("HeatingOperationRangeStdMin", "N0") - @specs.GetDecimal("HeatingOperationRangeStdMax", "N0")</td>
    </tr>

    <tr>
        <td>Holding Refrigerant Charge (lbs):</td>
        <td>
            @if (specs.GetString("FactoryStdRefrigerantCharge") != null)
                {
                @specs.GetString("FactoryStdRefrigerantCharge")
            }
            }
        </td>
 
        <td>Net Weight (lb):</td>
        <td>
            @specs.GetString("WeightUnit")
        </td>
   </tr>

    <tr>
        <td>Dimensions (HxWxD) (in):</td>
        <td>@specs.GetString("DimensionsUnitHeight") x @specs.GetString("DimensionsUnitWidth") x @specs.GetString("DimensionsUnitDepth")</td>

        <td>Gross Weight (lb):</td>
        <td>@specs.GetDecimal("WeightShippingUnit", "N0")</td>
    </tr>

    <tr>

    </tr>
