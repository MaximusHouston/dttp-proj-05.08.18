@model ProductModel
@{
    var specs = Model.Specifications;
}

<tr>
    <td>Power Supply (V/Hz/Ph):</td>
    <td>@specs.GetString("PowerVoltage") / @specs.GetString("PowerFrequency") / @specs.GetString("PowerPhase")</td>

    @{
        var airFlowLabels = new List<string>
    {
        "HH","High","Med","Low","SL"
    };

        var airFlowHigh = "";

        if (specs.GetString("AirFlowRateHighText") != null)
        {
            airFlowHigh = specs.GetString("AirFlowRateHighText");
        }
        else if (specs.GetString("AirFlowRateHighCooling") != null)
        {
            airFlowHigh = specs.GetString("AirFlowRateHighCooling");
        }
        else if (specs.GetDecimal("AirFlowRateHighHeating", "N0") != null)
        {
            airFlowHigh = specs.GetDecimal("AirFlowRateHighHeating", "N0");
        }

        var airFlowRates = new List<string>{
        specs.GetDecimal("AirFlowRateSuperHighCooling", "N0") != null? specs.GetDecimal("AirFlowRateSuperHighCooling", "N0"): specs.GetDecimal("AirFlowRateSuperHighHeating", "N0"),
        airFlowHigh,
        specs.GetDecimal("AirFlowRateMediumCooling", "N0") != null? specs.GetDecimal("AirFlowRateMediumCooling", "N0"): specs.GetDecimal("AirFlowRateMediumHeating", "N0"),
        specs.GetDecimal("AirFlowRateLowCooling", "N0") != null? specs.GetDecimal("AirFlowRateLowCooling", "N0"): specs.GetDecimal("AirFlowRateLowHeating", "N0"),
        specs.GetDecimal("AirFlowRateSuperLowCooling", "N0") != null? specs.GetDecimal("AirFlowRateSuperLowCooling", "N0"): specs.GetDecimal("AirFlowRateSuperLowHeating", "N0")
    };

        var airFlowLabelsCombined = new List<string>();
        var airFlowRatesCombined = new List<string>();

        for (var i = 0; i < airFlowRates.Count; i++)
        {
            if (airFlowRates[i] != null)
            {
                airFlowRatesCombined.Add(airFlowRates[i]);
                airFlowLabelsCombined.Add(airFlowLabels[i]);
            }
        }
    }

    @if (airFlowHigh != null)
            {
        <td>Airflow Rate (@string.Join(" / ", airFlowLabelsCombined)) (CFM):</td>
            <td>@string.Join(" / ", airFlowRatesCombined)</td>
    }
    else
    {
        <td>Airflow Rate (CFM):</td>
            <td></td>
    }


</tr>
<tr>
    <td>Min. Circuit Amps MCA (A):</td>
    <td>
        @specs.GetString("MinCircuitAmps")
    </td>
    <td>Motor Type:</td>
    <td>@specs.GetString("MotorSpeedType")</td>
</tr>
<tr>
    <td>Max Overcurrent Protection (MOP) (A):</td>
    <td>
        @specs.GetString("MaxOvercurrentProtection")
    </td>

    <td>Gas Valve Type:</td>
    <td>@specs.GetString("GasValveType")</td>
</tr>
<tr>
    <td>Dimensions (HxWxD) (in):</td>
    <td>@specs.GetString("DimensionsUnitHeight") x @specs.GetString("DimensionsUnitWidth") x @specs.GetString("DimensionsUnitDepth")</td>

    <td>Installation Configuration:</td>
    <td>@specs.GetString("InstallationConfiguration")</td>
</tr>

<tr>
    <td>Number of Burners:</td>
    <td>@specs.GetDecimal("NumberOfBurners", "N0")</td>

    <td>Blower Size Diameter (inch):</td>
    <td>@specs.GetString("DimensionsBlowerDiameter")</td>
</tr>

<tr>
    <td>Heating Vent Diameter in. (Min/Max):</td>
    <td>@specs.GetString("HeatingVentDiameterMin") / @specs.GetString("HeatingVentDiameterMax")</td>

    <td>Blower Size Width (inch):</td>
    <td>@specs.GetString("DimensionsBlowerWidth")</td>
</tr>

<tr>
    <td>Condensate Connection (inch):</td>
    <td>@specs.GetString("CondensateDrainOutlet")</td>


    @{
        var soundPressureLabels = new List<string>
            {
                "High","Med","Low","SL"
            };

        var soundPressureRates = new List<string>{
                specs.GetDecimal("SoundPressureHighCooling", "N0") != null? specs.GetDecimal("SoundPressureHighCooling", "N0"): specs.GetDecimal("SoundPressureHighHeating", "N0"),
                specs.GetDecimal("SoundPressureMediumCooling", "N0") != null? specs.GetDecimal("SoundPressureMediumCooling", "N0"): specs.GetDecimal("SoundPressureMediumHeating", "N0"),
                specs.GetDecimal("SoundPressureLowCooling", "N0") != null? specs.GetDecimal("SoundPressureLowCooling", "N0"): specs.GetDecimal("SoundPressureLowHeating", "N0"),
                specs.GetDecimal("SoundPressureSuperLowCooling", "N0") != null? specs.GetDecimal("SoundPressureSuperLowCooling", "N0"): specs.GetDecimal("SoundPressureSuperLowHeating", "N0")
            };

        var soundPressureLabelsCombined = new List<string>();
        var soundPressureRatesCombined = new List<string>();

        for (var i = 0; i < soundPressureRates.Count; i++)
        {
            if (soundPressureRates[i] != null)
            {
                soundPressureRatesCombined.Add(soundPressureRates[i]);
                soundPressureLabelsCombined.Add(soundPressureLabels[i]);
            }
        }
    }

    @if (soundPressureRates != null)
            {
        <td>Sound Pressure (@string.Join(" / ", soundPressureLabelsCombined)) (dBA):</td>
            <td>@string.Join(" / ", soundPressureRatesCombined)</td>
    }
    else
    {
        <td>Sound Pressure (dBA):</td>
            <td></td>
    }
</tr>

<tr>
    <td>Net Weight (lb):</td>
    <td>
        @specs.GetString("WeightUnit")
    </td>

    <td>Gross Weight (lb):</td>
    <td>@specs.GetDecimal("WeightShippingUnit", "N0")</td>
</tr>


