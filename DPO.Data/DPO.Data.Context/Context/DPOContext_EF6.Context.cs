

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace DPO.Data
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class DPOContext : DbContext
{
/* Not needed by AM 2014
    public DPOContext()
        : base("name=DPOContext")
    {

        this.Configuration.LazyLoadingEnabled = false;

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }
	ALM*/

    public virtual DbSet<AccountMultiplier> AccountMultipliers { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<CityArea> CityAreas { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    public virtual DbSet<SystemAccess> SystemAccesses { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<BusinessType> BusinessTypes { get; set; }

    public virtual DbSet<Business> Businesses { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductFamily> ProductFamilies { get; set; }

    public virtual DbSet<ProductSpecificationLabel> ProductSpecificationLabels { get; set; }

    public virtual DbSet<ProductSpecification> ProductSpecifications { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<ProductModelType> ProductModelTypes { get; set; }

    public virtual DbSet<UserBasketItem> UserBasketItems { get; set; }

    public virtual DbSet<SubmittalSheetType> SubmittalSheetTypes { get; set; }

    public virtual DbSet<RequirementType> RequirementTypes { get; set; }

    public virtual DbSet<ProductAccessory> ProductAccessories { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentProductLink> DocumentProductLinks { get; set; }

    public virtual DbSet<ProductSpecificationKeyLookup> ProductSpecificationKeyLookups { get; set; }

    public virtual DbSet<VwProductDocument> VwProductDocuments { get; set; }

    public virtual DbSet<VwProductSpecification> VwProductSpecifications { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<ProductNote> ProductNotes { get; set; }

    public virtual DbSet<ProductNoteType> ProductNoteTypes { get; set; }

    public virtual DbSet<VwProductNote> VwProductNotes { get; set; }

    public virtual DbSet<VwProductSystemComponent> VwProductSystemComponents { get; set; }

    public virtual DbSet<ConstructionType> ConstructionTypes { get; set; }

    public virtual DbSet<ProjectType> ProjectTypes { get; set; }

    public virtual DbSet<VerticalMarketType> VerticalMarketTypes { get; set; }

    public virtual DbSet<ProjectStatusType> ProjectStatusTypes { get; set; }

    public virtual DbSet<ProjectTransfer> ProjectTransfers { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<ZoneStrategyType> ZoneStrategyTypes { get; set; }

    public virtual DbSet<BrandCompetitorType> BrandCompetitorTypes { get; set; }

    public virtual DbSet<ProjectOpenStatusType> ProjectOpenStatusTypes { get; set; }

    public virtual DbSet<ProductMarketType> ProductMarketTypes { get; set; }

    public virtual DbSet<SystemBasisDesignType> SystemBasisDesignTypes { get; set; }

    public virtual DbSet<DiscountRequestStatusType> DiscountRequestStatusTypes { get; set; }

    public virtual DbSet<Quote> Quotes { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<DiscountRequest> DiscountRequests { get; set; }

    public virtual DbSet<BillboardPoster> BillboardPosters { get; set; }

    public virtual DbSet<BuildingFloorConfiguration> BuildingFloorConfigurations { get; set; }

    public virtual DbSet<BuildingFloorConfigurationsIndoorUnit> BuildingFloorConfigurationsIndoorUnits { get; set; }

    public virtual DbSet<BuildingFloorLink> BuildingFloorLinks { get; set; }

    public virtual DbSet<BuildingFloor> BuildingFloors { get; set; }

    public virtual DbSet<Building> Buildings { get; set; }

    public virtual DbSet<CitySystem> CitySystems { get; set; }

    public virtual DbSet<CommsCenterVideo> CommsCenterVideos { get; set; }

    public virtual DbSet<ContactUsFormOption> ContactUsFormOptions { get; set; }

    public virtual DbSet<ContactUsFormSubject> ContactUsFormSubjects { get; set; }

    public virtual DbSet<DecisionTreeDependancy> DecisionTreeDependancies { get; set; }

    public virtual DbSet<DecisionTreeNode> DecisionTreeNodes { get; set; }

    public virtual DbSet<DecisionTreeSystem> DecisionTreeSystems { get; set; }

    public virtual DbSet<HomeScreen> HomeScreens { get; set; }

    public virtual DbSet<LibraryDirectory> LibraryDirectories { get; set; }

    public virtual DbSet<LibraryDocumentRelationship> LibraryDocumentRelationships { get; set; }

    public virtual DbSet<LibraryDocument> LibraryDocuments { get; set; }

    public virtual DbSet<Tool> Tools { get; set; }

    public virtual DbSet<DaikinEquipmentAtAdvantageType> DaikinEquipmentAtAdvantageTypes { get; set; }

    public virtual DbSet<ProbablilityOfCloseType> ProbablilityOfCloseTypes { get; set; }

    public virtual DbSet<ProjectExportType> ProjectExportTypes { get; set; }

    public virtual DbSet<Link> Links { get; set; }

    public virtual DbSet<RequirementLevel> RequirementLevels { get; set; }

    public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }

    public virtual DbSet<JobRun> JobRuns { get; set; }

    public virtual DbSet<PermissionType> PermissionTypes { get; set; }

    public virtual DbSet<Entity> Entities { get; set; }

    public virtual DbSet<ProjectLeadStatusType> ProjectLeadStatusTypes { get; set; }

    public virtual DbSet<MultiplierCategoryType> MultiplierCategoryTypes { get; set; }

    public virtual DbSet<MultiplierType> MultiplierTypes { get; set; }

    public virtual DbSet<MultiplierTypesMultiplierCategoryType> MultiplierTypesMultiplierCategoryTypes { get; set; }

    public virtual DbSet<ProductClassCode> ProductClassCodes { get; set; }

    public virtual DbSet<ProjectPipelineNote> ProjectPipelineNotes { get; set; }

    public virtual DbSet<ProjectPipelineNoteType> ProjectPipelineNoteTypes { get; set; }

    public virtual DbSet<CommissionMultiplier> CommissionMultipliers { get; set; }

    public virtual DbSet<CommissionRequestStatusType> CommissionRequestStatusTypes { get; set; }

    public virtual DbSet<CommissionRequest> CommissionRequests { get; set; }

    public virtual DbSet<CustomerType> CustomerTypes { get; set; }

    public virtual DbSet<FundingType> FundingTypes { get; set; }

    public virtual DbSet<WinLossType> WinLossTypes { get; set; }

    public virtual DbSet<OrderAttachment> OrderAttachments { get; set; }

    public virtual DbSet<OrderStatusType> OrderStatusTypes { get; set; }

    public virtual DbSet<CommissionCalculation> CommissionCalculations { get; set; }

    public virtual DbSet<GridSetting> GridSettings { get; set; }

    public virtual DbSet<PermissionAudit> PermissionAudits { get; set; }

    public virtual DbSet<ProductsWithNoMultiplier> ProductsWithNoMultipliers { get; set; }

    public virtual DbSet<UnitInstallationType> UnitInstallationTypes { get; set; }

    public virtual DbSet<UnitaryCommissionCurve> UnitaryCommissionCurves { get; set; }

    public virtual DbSet<DocumentType> DocumentTypes { get; set; }

    public virtual DbSet<PricingType> PricingTypes { get; set; }

    public virtual DbSet<ProductFunctionCategory> ProductFunctionCategories { get; set; }

    public virtual DbSet<ProductSubFamily> ProductSubFamilies { get; set; }

    public virtual DbSet<PIMAttributeValueMap> PIMAttributeValueMaps { get; set; }

    public virtual DbSet<PIMListOfValuesMap> PIMListOfValuesMaps { get; set; }

    public virtual DbSet<ProductAccessoryType> ProductAccessoryTypes { get; set; }

    public virtual DbSet<ProductCompressorStage> ProductCompressorStages { get; set; }

    public virtual DbSet<ProductGasValveType> ProductGasValveTypes { get; set; }

    public virtual DbSet<ProductHeatExchangerType> ProductHeatExchangerTypes { get; set; }

    public virtual DbSet<ProductInstallationConfigurationType> ProductInstallationConfigurationTypes { get; set; }

    public virtual DbSet<ProductMotorSpeedType> ProductMotorSpeedTypes { get; set; }

    public virtual DbSet<ProductPowerVoltageType> ProductPowerVoltageTypes { get; set; }

    public virtual DbSet<PIMMapType> PIMMapTypes { get; set; }

    public virtual DbSet<PIMAttributeMap> PIMAttributeMaps { get; set; }

    public virtual DbSet<ProductType> ProductTypes { get; set; }

    public virtual DbSet<ProductClassPIM> ProductClassPIMs { get; set; }

    public virtual DbSet<ProductEnergySourceType> ProductEnergySourceTypes { get; set; }

    public virtual DbSet<ProductStatus> ProductStatuses { get; set; }

    public virtual DbSet<BusinessLink> BusinessLinks { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<QuoteItem> QuoteItems { get; set; }

    public virtual DbSet<Seed> Seeds { get; set; }

    public virtual DbSet<SeedType> SeedTypes { get; set; }

    public virtual DbSet<LineItemOptionType> LineItemOptionTypes { get; set; }

    public virtual DbSet<LineItemType> LineItemTypes { get; set; }

    public virtual DbSet<OrderItemOption> OrderItemOptions { get; set; }

    public virtual DbSet<QuoteItemOption> QuoteItemOptions { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<InventoryStatus> InventoryStatuses { get; set; }

    public virtual DbSet<Product> Products { get; set; }


    [DbFunction("DPOContext", "FnProductDocuments")]
    public virtual IQueryable<VwProductDocument> FnProductDocuments(Nullable<long> productId, Nullable<int> documentTypeId)
    {       var guid = Guid.NewGuid().ToString("N"); 
        var productIdParameter = productId.HasValue ?
            new ObjectParameter("ProductId" + guid, productId) :
            new ObjectParameter("ProductId" + guid, typeof(long));


        var documentTypeIdParameter = documentTypeId.HasValue ?
            new ObjectParameter("DocumentTypeId" + guid, documentTypeId) :
            new ObjectParameter("DocumentTypeId" + guid, typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<VwProductDocument>("[DPOContext].[FnProductDocuments](@ProductId" + guid + ", @DocumentTypeId" + guid + ")", productIdParameter, documentTypeIdParameter);
    } 

    [DbFunction("DPOContext", "FnProductSpecifications")]
    public virtual IQueryable<VwProductSpecification> FnProductSpecifications(Nullable<long> productId)
    {       var guid = Guid.NewGuid().ToString("N"); 
        var productIdParameter = productId.HasValue ?
            new ObjectParameter("ProductId" + guid, productId) :
            new ObjectParameter("ProductId" + guid, typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<VwProductSpecification>("[DPOContext].[FnProductSpecifications](@ProductId" + guid + ")", productIdParameter);
    } 

    [DbFunction("DPOContext", "FnGetGroupsAboveGroupId")]
    public virtual IQueryable<Group> FnGetGroupsAboveGroupId(Nullable<long> groupId)
    {       var guid = Guid.NewGuid().ToString("N"); 
        var groupIdParameter = groupId.HasValue ?
            new ObjectParameter("GroupId" + guid, groupId) :
            new ObjectParameter("GroupId" + guid, typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Group>("[DPOContext].[FnGetGroupsAboveGroupId](@GroupId" + guid + ")", groupIdParameter);
    } 

    [DbFunction("DPOContext", "FnGetGroupsBelowGroupId")]
    public virtual IQueryable<Group> FnGetGroupsBelowGroupId(Nullable<long> groupId)
    {       var guid = Guid.NewGuid().ToString("N"); 
        var groupIdParameter = groupId.HasValue ?
            new ObjectParameter("GroupId" + guid, groupId) :
            new ObjectParameter("GroupId" + guid, typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Group>("[DPOContext].[FnGetGroupsBelowGroupId](@GroupId" + guid + ")", groupIdParameter);
    } 

    [DbFunction("DPOContext", "FnGetPermissionsUnderPermissionId")]
    public virtual IQueryable<Permission> FnGetPermissionsUnderPermissionId(Nullable<long> permissionId)
    {       var guid = Guid.NewGuid().ToString("N"); 
        var permissionIdParameter = permissionId.HasValue ?
            new ObjectParameter("PermissionId" + guid, permissionId) :
            new ObjectParameter("PermissionId" + guid, typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Permission>("[DPOContext].[FnGetPermissionsUnderPermissionId](@PermissionId" + guid + ")", permissionIdParameter);
    } 

    [DbFunction("DPOContext", "FnProductNotes")]
    public virtual IQueryable<VwProductNote> FnProductNotes(Nullable<long> productId, Nullable<int> productNoteTypeId)
    {       var guid = Guid.NewGuid().ToString("N"); 
        var productIdParameter = productId.HasValue ?
            new ObjectParameter("ProductId" + guid, productId) :
            new ObjectParameter("ProductId" + guid, typeof(long));


        var productNoteTypeIdParameter = productNoteTypeId.HasValue ?
            new ObjectParameter("ProductNoteTypeId" + guid, productNoteTypeId) :
            new ObjectParameter("ProductNoteTypeId" + guid, typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<VwProductNote>("[DPOContext].[FnProductNotes](@ProductId" + guid + ", @ProductNoteTypeId" + guid + ")", productIdParameter, productNoteTypeIdParameter);
    } 

    public virtual int spUpdateMembersCountForGroups()
    { 
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMembersCountForGroups");
    } 

    public virtual int spUpdateProductClassCodeForSystems()
    { 
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProductClassCodeForSystems");
    } 

    public virtual int spUpdateProductListPriceForSystems()
    { 
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateProductListPriceForSystems");
    } 

    public virtual int spUpdateRecalculationRequiredForQuotes()
    { 
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateRecalculationRequiredForQuotes");
    } 

    public virtual int spDocumentLibraryClearOldDocuments(Nullable<int> daysToClear)
    { 
        var daysToClearParameter = daysToClear.HasValue ?
            new ObjectParameter("DaysToClear", daysToClear) :
            new ObjectParameter("DaysToClear", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDocumentLibraryClearOldDocuments", daysToClearParameter);
    } 

    public virtual int spDocumentLibraryIdentifyLatestFolders(string libraryHomeName, string latestDocumentsName, string vRVLCPartnerLatestDocumentsName, ObjectParameter outLibraryHomeId, ObjectParameter outLatestDocumentsId, ObjectParameter outVRVLCPartnerLatestDocumentsId)
    { 
        var libraryHomeNameParameter = libraryHomeName != null ?
            new ObjectParameter("LibraryHomeName", libraryHomeName) :
            new ObjectParameter("LibraryHomeName", typeof(string));


        var latestDocumentsNameParameter = latestDocumentsName != null ?
            new ObjectParameter("LatestDocumentsName", latestDocumentsName) :
            new ObjectParameter("LatestDocumentsName", typeof(string));


        var vRVLCPartnerLatestDocumentsNameParameter = vRVLCPartnerLatestDocumentsName != null ?
            new ObjectParameter("VRVLCPartnerLatestDocumentsName", vRVLCPartnerLatestDocumentsName) :
            new ObjectParameter("VRVLCPartnerLatestDocumentsName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDocumentLibraryIdentifyLatestFolders", libraryHomeNameParameter, latestDocumentsNameParameter, vRVLCPartnerLatestDocumentsNameParameter, outLibraryHomeId, outLatestDocumentsId, outVRVLCPartnerLatestDocumentsId);
    } 

    public virtual int spDocumentLibraryLoadLatestDocuments(Nullable<int> daysToLoad)
    { 
        var daysToLoadParameter = daysToLoad.HasValue ?
            new ObjectParameter("DaysToLoad", daysToLoad) :
            new ObjectParameter("DaysToLoad", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDocumentLibraryLoadLatestDocuments", daysToLoadParameter);
    } 
}

}

